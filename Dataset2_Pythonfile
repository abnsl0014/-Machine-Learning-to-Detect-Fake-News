{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the required packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\navkiran\\anaconda3 4.3.1\\lib\\site-packages\\sklearn\\cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n",
      "C:\\Users\\navkiran\\anaconda3 4.3.1\\lib\\site-packages\\sklearn\\grid_search.py:43: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.\n",
      "  DeprecationWarning)\n",
      "C:\\Users\\navkiran\\anaconda3 4.3.1\\lib\\site-packages\\sklearn\\learning_curve.py:23: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the functions are moved. This module will be removed in 0.20\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "import sys\n",
    "import scipy\n",
    "from sklearn import naive_bayes\n",
    "from sklearn import svm\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, f1_score, accuracy_score, confusion_matrix\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.cross_validation import StratifiedKFold, cross_val_score, train_test_split \n",
    "from sklearn.learning_curve import learning_curve\n",
    "from pandas.tools.plotting import scatter_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from sklearn import model_selection\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from textblob import TextBlob\n",
    "from textblob import TextBlob, Word, Blobber\n",
    "from textblob.classifiers import NaiveBayesClassifier\n",
    "from textblob.taggers import NLTKTagger"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading the csv file to dataframe named adv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "adv=pd.read_csv('fakerealnews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2353, 2)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>news</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>You Can Smell Hillary’s Fear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Watch The Exact Moment Paul Ryan Committed Pol...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Kerry to go to Paris in gesture of sympathy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Bernie supporters on Twitter erupt in anger ag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The Battle of New York: Why This Primary Matters</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Tehran, USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Girl Horrified At What She Watches Boyfriend D...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>REAL</td>\n",
       "      <td>‘Britain’s Schindler’ Dies at 106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Fact check: Trump and Clinton at the 'commande...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Iran reportedly makes new push for uranium con...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>REAL</td>\n",
       "      <td>With all three Clintons in Iowa, a glimpse at ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump’s Shockingly Weak Delegate Game S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Strong Solar Storm, Tech Risks Today | S0 News...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>10 Ways America Is Preparing for World War 3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Trump takes on Cruz, but lightly</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>REAL</td>\n",
       "      <td>How women lead differently</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Shocking! Michele Obama &amp; Hillary Caught Glamo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Hillary Clinton in HUGE Trouble After America ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>REAL</td>\n",
       "      <td>What's in that Iran bill that Obama doesn't like?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The 1 chart that explains everything you need ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The slippery slope to Trump’s proposed ban on ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Episode #160 – SUNDAY WIRE: ‘Hail to the Deplo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Hillary Clinton Makes A Bipartisan Appeal on S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>REAL</td>\n",
       "      <td>New Senate majority leader’s main goal for GOP...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>‘Inferno’ and the Overpopulation Myth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Anti-Trump forces seek last-ditch delegate revolt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Sanders Trounces Clinton in W. Va. -- But Will...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump Is Changing His Campaign Slogan t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Pure chaos: Donald Trump’s campaign management...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Syrian War Report – November 1, 2016: Syrian M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2303</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Mike Pence says “shalom” to Israel’s Republicans</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2304</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obamacare case: All eyes on 2 justices</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2305</th>\n",
       "      <td>REAL</td>\n",
       "      <td>South Carolina police officer charged with mur...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2306</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>‘We never denied Israel’s right to Jerusalem, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>King Rufus Found Buried Under Parking Lot Near...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2308</th>\n",
       "      <td>REAL</td>\n",
       "      <td>\"Political identity is fair game for hatred\": ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2309</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obama Authorizes Deploying Up To 450 More Troo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2310</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>BREAKING: FBI Gets Search Warrant For State De...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2311</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Tokyo could ban US troops from stationing on d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2312</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Putin being FRAMED at UN for War Crimes in Syr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2313</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Even ExxonMobil says climate change is real. S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2314</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Russian Researchers Discover Secret Nazi Milit...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2315</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Even Democratic Voters Don’t Trust Hillary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2316</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Federal Judge Overturns Nebraska Gay Marriage Ban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2317</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Comment on SJWs Outrage over Leonardo DiCaprio...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2318</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Trump, Sanders Crush the Competition in New Ha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2319</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Monica Lewinsky’s latest comeback, fueled by m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2320</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>7 Halloween Treats That Trick Children Into Cl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2321</th>\n",
       "      <td>REAL</td>\n",
       "      <td>A boss often can fire you while you're hospita...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2322</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Why Comey Reopened the Hillary Investigation (...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Comment on Fury as German primary school ‘forc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2324</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Rieder: Charlie Hebdo goes on, and that matters</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2325</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obama will walk away from Iran talks if no ins...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2326</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The 2016 Republican field might be the most di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2327</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump may be showing us the future of r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Joint Way Forward Deal Does Not Lead to Peace ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Dakota Pipeline Protests Are Working! One Bank...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Republicans in state governments plan juggerna...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2331</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Sanders, Dem establishment battle boils over</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2332</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Election 2016: A Political System In Crisis</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2333 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     label                                               news\n",
       "0     FAKE                       You Can Smell Hillary’s Fear\n",
       "1     FAKE  Watch The Exact Moment Paul Ryan Committed Pol...\n",
       "2     REAL        Kerry to go to Paris in gesture of sympathy\n",
       "3     FAKE  Bernie supporters on Twitter erupt in anger ag...\n",
       "4     REAL   The Battle of New York: Why This Primary Matters\n",
       "5     FAKE                                        Tehran, USA\n",
       "6     FAKE  Girl Horrified At What She Watches Boyfriend D...\n",
       "7     REAL                  ‘Britain’s Schindler’ Dies at 106\n",
       "8     REAL  Fact check: Trump and Clinton at the 'commande...\n",
       "9     REAL  Iran reportedly makes new push for uranium con...\n",
       "10    REAL  With all three Clintons in Iowa, a glimpse at ...\n",
       "11    REAL  Donald Trump’s Shockingly Weak Delegate Game S...\n",
       "12    FAKE  Strong Solar Storm, Tech Risks Today | S0 News...\n",
       "13    FAKE       10 Ways America Is Preparing for World War 3\n",
       "14    REAL                   Trump takes on Cruz, but lightly\n",
       "15    REAL                         How women lead differently\n",
       "16    FAKE  Shocking! Michele Obama & Hillary Caught Glamo...\n",
       "17    FAKE  Hillary Clinton in HUGE Trouble After America ...\n",
       "18    REAL  What's in that Iran bill that Obama doesn't like?\n",
       "19    REAL  The 1 chart that explains everything you need ...\n",
       "20    REAL  The slippery slope to Trump’s proposed ban on ...\n",
       "21    FAKE  Episode #160 – SUNDAY WIRE: ‘Hail to the Deplo...\n",
       "22    REAL  Hillary Clinton Makes A Bipartisan Appeal on S...\n",
       "23    REAL  New Senate majority leader’s main goal for GOP...\n",
       "24    FAKE              ‘Inferno’ and the Overpopulation Myth\n",
       "25    REAL  Anti-Trump forces seek last-ditch delegate revolt\n",
       "26    REAL  Sanders Trounces Clinton in W. Va. -- But Will...\n",
       "27    REAL  Donald Trump Is Changing His Campaign Slogan t...\n",
       "28    REAL  Pure chaos: Donald Trump’s campaign management...\n",
       "29    FAKE  Syrian War Report – November 1, 2016: Syrian M...\n",
       "...    ...                                                ...\n",
       "2303  FAKE   Mike Pence says “shalom” to Israel’s Republicans\n",
       "2304  REAL             Obamacare case: All eyes on 2 justices\n",
       "2305  REAL  South Carolina police officer charged with mur...\n",
       "2306  FAKE  ‘We never denied Israel’s right to Jerusalem, ...\n",
       "2307  FAKE  King Rufus Found Buried Under Parking Lot Near...\n",
       "2308  REAL  \"Political identity is fair game for hatred\": ...\n",
       "2309  REAL  Obama Authorizes Deploying Up To 450 More Troo...\n",
       "2310  FAKE  BREAKING: FBI Gets Search Warrant For State De...\n",
       "2311  FAKE  Tokyo could ban US troops from stationing on d...\n",
       "2312  FAKE  Putin being FRAMED at UN for War Crimes in Syr...\n",
       "2313  REAL  Even ExxonMobil says climate change is real. S...\n",
       "2314  FAKE  Russian Researchers Discover Secret Nazi Milit...\n",
       "2315  FAKE         Even Democratic Voters Don’t Trust Hillary\n",
       "2316  REAL  Federal Judge Overturns Nebraska Gay Marriage Ban\n",
       "2317  FAKE  Comment on SJWs Outrage over Leonardo DiCaprio...\n",
       "2318  REAL  Trump, Sanders Crush the Competition in New Ha...\n",
       "2319  REAL  Monica Lewinsky’s latest comeback, fueled by m...\n",
       "2320  FAKE  7 Halloween Treats That Trick Children Into Cl...\n",
       "2321  REAL  A boss often can fire you while you're hospita...\n",
       "2322  FAKE  Why Comey Reopened the Hillary Investigation (...\n",
       "2323  FAKE  Comment on Fury as German primary school ‘forc...\n",
       "2324  REAL    Rieder: Charlie Hebdo goes on, and that matters\n",
       "2325  REAL  Obama will walk away from Iran talks if no ins...\n",
       "2326  REAL  The 2016 Republican field might be the most di...\n",
       "2327  REAL  Donald Trump may be showing us the future of r...\n",
       "2328  FAKE  Joint Way Forward Deal Does Not Lead to Peace ...\n",
       "2329  FAKE  Dakota Pipeline Protests Are Working! One Bank...\n",
       "2330  REAL  Republicans in state governments plan juggerna...\n",
       "2331  REAL       Sanders, Dem establishment battle boils over\n",
       "2332  FAKE        Election 2016: A Political System In Crisis\n",
       "\n",
       "[2333 rows x 2 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.head(-20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Michael Moore Owes Me $4.99                                                                                         3\n",
       "OnPolitics | 's politics blog                                                                                       3\n",
       "Get Ready For Civil Unrest: Survey Finds That Most Americans Are Concerned About Election Violence                  2\n",
       "Clintons Are Under Multiple FBI Investigations as Agents Are Stymied                                                2\n",
       "Loretta Lynch becomes first African-American woman AG.                                                              2\n",
       "Meteor, space junk, rocket? Mysterious flash hits Siberia                                                           2\n",
       "WHO Cancer Agency Under Fire for withholding ‘carcinogenic glyphosate’ Documents                                    2\n",
       "Obamacare Enrollees Anxiously Await Supreme Court Decision That Threatens Their Coverage                            2\n",
       "University of Missouri, please immediately fire employees who taunted media                                         2\n",
       "Collusion Between Facebook and Hillary’s Campaign Revealed in Clinton Emails                                        2\n",
       "Hillary’s “Big Tent” is Obama’s “Grand Bargain” on Steroids                                                         2\n",
       "The Israeli Trumpess                                                                                                2\n",
       "What is going on with WikiLeaks?                                                                                    2\n",
       "With all three Clintons in Iowa, a glimpse at the fire that has eluded Hillary Clinton’s campaign                   1\n",
       "What do Americans really think of election coverage?                                                                1\n",
       "Marco Rubio doesn’t think sexual orientation is a choice but wants states to decide marriage                        1\n",
       "Must Read of the Day – Dennis Kucinich’s Extraordinary Warning on D.C.’s Think Tank Warmongers                      1\n",
       "Carson takes lead from Trump in new national poll                                                                   1\n",
       "Enrique Marquez: I got rifles for San Bernardino killer                                                             1\n",
       "Bobby Jindal, raised Hindu, uses story of Christian conversion to woo evangelicals for potential 2016 bid           1\n",
       "Here are the top five things to watch in tonight's debate                                                           1\n",
       "Breaking: Ivanka Trump Makes Tragic Announcement Both Donald Trump and Supporters Are Shocked (Video) | Prophecy    1\n",
       "Kurds Worried Turkey Will Stab Them in the Back as They Fight ISIS                                                  1\n",
       "New Poll: Americans Feel Less Safe After 15 Years Of War                                                            1\n",
       "A nuclear deal has been reached, but Iran must free Jason Rezaian                                                   1\n",
       "Walgreens to close 200 stores, boost cost cutting                                                                   1\n",
       "Russian pianist Denis Matsuev terrorized in US for supporting Putin                                                 1\n",
       "Hillary Wants Aggressively Interventionist Foreign Policy                                                           1\n",
       "Congressional leaders pushing debt limit plan, ahead of speaker vote                                                1\n",
       "GUEST POST: Why I’m Exceptional & Indispensable – by Hillary Clinton - Rob Slane                                    1\n",
       "                                                                                                                   ..\n",
       "Protesting Donald Trump’s Election, Not Wars, Surveillance, or Deportations                                         1\n",
       "As Crooked HIllary Investigation Reopens, Democrat Cities Push To Allow Illegal Immigrants Voting                   1\n",
       "VIDEO : Hillary Worshipper Rachel Maddow IN TEARS Over Reopened FBI Investigation – TruthFeed                       1\n",
       "Green Party’s Margaret Flowers Challenges US Senate Debate in Maryland as Undemocratic                              1\n",
       "Hung jury in Jodi Arias sentencing phase removes possibility of death sentence                                      1\n",
       "Lincoln Chafee Ends His Presidential Campaign                                                                       1\n",
       "Dilbert Creator Explains How Do I Know The Emails Are That Bad?                                                     1\n",
       "Is the Iran deal unraveling? Think again. | Institution                                                             1\n",
       "Anti-Trump delegates now responsible for nominating him                                                             1\n",
       "Trumps Hollywood Walk of Fame star Destroyed with a Sledgehammer and Pick                                           1\n",
       "Kiev officials forced to declare incomes, Ukrainians threaten revolt                                                1\n",
       "How Republicans will choose the next speaker                                                                        1\n",
       "Two Points About the Hillary Clinton Email Fiasco                                                                   1\n",
       "The Clinton Syndrome, Part 2: Can Hillary Escape This Time?                                                         1\n",
       "Another Primary Night's Results Confound (At Least Some) Expectations                                               1\n",
       "Uncovered audio: Hillary was ‘adamantly against illegal immigrants’                                                 1\n",
       "Lower Yields and Agropoisons: What is the Point of GM Mustard in India?                                             1\n",
       "18 State Swat Team Drill In Prep for Backlash Against a Stolen Election                                             1\n",
       "The Empire Files: Inside Palestine's Refugee Camps                                                                  1\n",
       "Standing Rock Protests: Police Turn In Badges Rather Than Incite Violence                                           1\n",
       "Here's why creating single-payer health care in America is so hard                                                  1\n",
       "Lesson learned? Goldman Sachs says not to expect \"Brexit-type surprise\" on Nov. 8                                   1\n",
       "Two: readers pick story on meat and climate change                                                                  1\n",
       "Battle against Islamic State expands as Egypt bombs Libyan affiliate                                                1\n",
       "BREAKING: Man Brags on Facebook of Voting 3 Times… Then Reveals How He Did It                                       1\n",
       "Mike Brown anniversary: Arrests, state of emergency                                                                 1\n",
       "370 Economists Sign Letter Urging America Not To Vote For Donald Trump                                              1\n",
       "Wall Street, Hollywood, The Media And SJWs Fail To Stop Donald Trump From Becoming America’s 45th President         1\n",
       "Obama Details His Disappointment With Netanyahu In First Post-Election Comments                                     1\n",
       "Christianity under attack: US must do more to promote religious freedom                                             1\n",
       "Name: news, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.news.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FAKE    1206\n",
       "REAL    1147\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.label.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregate statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>news</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2353</td>\n",
       "      <td>2353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>2</td>\n",
       "      <td>2338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Michael Moore Owes Me $4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1206</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       label                         news\n",
       "count   2353                         2353\n",
       "unique     2                         2338\n",
       "top     FAKE  Michael Moore Owes Me $4.99\n",
       "freq    1206                            3"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>news</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">\"America has a simple ideology\": how one of Russia's top US experts explains America</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>REAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">\"Political identity is fair game for hatred\": how Republicans and Democrats discriminate</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>REAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">#2816: Clinton Pride’s 8(a) Pig Farm Bridge – Serco Zulu Server Snuff –Soros's Patented Voter Key</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">#BREAKING: SECOND Assassination Attempt On Trump In NV; Suspect Detained (LIVE BLOG)</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">#BlackLivesMatter: Why movement is its own worst enemy</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>REAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">#BoycottComedian…ROBERT DENIRO Wanted “To Punch Trump In The Face”…Supports Anti-Trump Rioters…Now Wants Americans To Support His New Movie [VIDEO]</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">#DraftOurDaughters: Pro-War Hillary Faces Backlash Over Female Draft</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">#InNorthDakota ~~ PALESTINIANS STAND WITH THE SIOUX</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">“Honor Our Immigrant Veterans” Replayed</th>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“Ignorant scum who disagree with me should be more tolerant” complains voter</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“I’m glad that he won”: The surprising Palestinian reaction to Netanyahu’s win</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>REAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“Organic” Food From China Found To Be Highly Contaminated</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“There is such a thing as being too late”: Obama issues a desperate call for a global climate deal</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>REAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“We Were Long Overdue A Presidential Assassination Anyway”</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“We won, you lost, get over it” Brexiters told outside High Court</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">“Wikileaks is the Mossad, Stupid, Not the Russians, We are playing them like a fiddle…” Assange (sort of)</th>\n",
       "      <th>count</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FAKE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9352 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          label\n",
       "news                                                           \n",
       "\"America has a simple ideology\": how one of Rus... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     REAL\n",
       "                                                   freq       1\n",
       "\"Political identity is fair game for hatred\": h... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     REAL\n",
       "                                                   freq       1\n",
       "#2816: Clinton Pride’s 8(a) Pig Farm Bridge – S... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "#BREAKING: SECOND Assassination Attempt On Trum... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "#BlackLivesMatter: Why movement is its own wors... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     REAL\n",
       "                                                   freq       1\n",
       "#BoycottComedian…ROBERT DENIRO Wanted “To Punch... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "#DraftOurDaughters: Pro-War Hillary Faces Backl... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "#InNorthDakota ~~ PALESTINIANS STAND WITH THE S... count      1\n",
       "                                                   unique     1\n",
       "...                                                         ...\n",
       "“Honor Our Immigrant Veterans” Replayed            top     FAKE\n",
       "                                                   freq       1\n",
       "“Ignorant scum who disagree with me should be m... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "“I’m glad that he won”: The surprising Palestin... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     REAL\n",
       "                                                   freq       1\n",
       "“Organic” Food From China Found To Be Highly Co... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "“There is such a thing as being too late”: Obam... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     REAL\n",
       "                                                   freq       1\n",
       "“We Were Long Overdue A Presidential Assassinat... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "“We won, you lost, get over it” Brexiters told ... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "“Wikileaks is the Mossad, Stupid, Not the Russi... count      1\n",
       "                                                   unique     1\n",
       "                                                   top     FAKE\n",
       "                                                   freq       1\n",
       "\n",
       "[9352 rows x 1 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.groupby('news').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>news</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">FAKE</th>\n",
       "      <th>count</th>\n",
       "      <td>1206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Michael Moore Owes Me $4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">REAL</th>\n",
       "      <th>count</th>\n",
       "      <td>1147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>OnPolitics | 's politics blog</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       news\n",
       "label                                      \n",
       "FAKE  count                            1206\n",
       "      unique                           1196\n",
       "      top       Michael Moore Owes Me $4.99\n",
       "      freq                                3\n",
       "REAL  count                            1147\n",
       "      unique                           1142\n",
       "      top     OnPolitics | 's politics blog\n",
       "      freq                                3"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.groupby('label').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "FAKE    1206\n",
       "REAL    1147\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.groupby('label').size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Null Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>news</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>You Can Smell Hillary’s Fear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Watch The Exact Moment Paul Ryan Committed Pol...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Kerry to go to Paris in gesture of sympathy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Bernie supporters on Twitter erupt in anger ag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The Battle of New York: Why This Primary Matters</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Tehran, USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Girl Horrified At What She Watches Boyfriend D...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>REAL</td>\n",
       "      <td>‘Britain’s Schindler’ Dies at 106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Fact check: Trump and Clinton at the 'commande...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Iran reportedly makes new push for uranium con...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>REAL</td>\n",
       "      <td>With all three Clintons in Iowa, a glimpse at ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump’s Shockingly Weak Delegate Game S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Strong Solar Storm, Tech Risks Today | S0 News...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>10 Ways America Is Preparing for World War 3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Trump takes on Cruz, but lightly</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>REAL</td>\n",
       "      <td>How women lead differently</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Shocking! Michele Obama &amp; Hillary Caught Glamo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Hillary Clinton in HUGE Trouble After America ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>REAL</td>\n",
       "      <td>What's in that Iran bill that Obama doesn't like?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The 1 chart that explains everything you need ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The slippery slope to Trump’s proposed ban on ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Episode #160 – SUNDAY WIRE: ‘Hail to the Deplo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Hillary Clinton Makes A Bipartisan Appeal on S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>REAL</td>\n",
       "      <td>New Senate majority leader’s main goal for GOP...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>‘Inferno’ and the Overpopulation Myth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Anti-Trump forces seek last-ditch delegate revolt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Sanders Trounces Clinton in W. Va. -- But Will...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump Is Changing His Campaign Slogan t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Pure chaos: Donald Trump’s campaign management...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Syrian War Report – November 1, 2016: Syrian M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Comment on Fury as German primary school ‘forc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2324</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Rieder: Charlie Hebdo goes on, and that matters</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2325</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obama will walk away from Iran talks if no ins...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2326</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The 2016 Republican field might be the most di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2327</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Donald Trump may be showing us the future of r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Joint Way Forward Deal Does Not Lead to Peace ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Dakota Pipeline Protests Are Working! One Bank...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Republicans in state governments plan juggerna...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2331</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Sanders, Dem establishment battle boils over</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2332</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Election 2016: A Political System In Crisis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2333</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>After terrorizing America with Zika scaremonge...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2334</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obama Says Terrorists Seek Legitimacy by Using...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2335</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Why NATO is put on war footing against Russia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2336</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Top five donors to Clinton campaign are Jewish</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2337</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The worst election ever</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2338</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Tomb Opened WhereJesus was Resurrected After C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2339</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The House GOP budget is a gimmick</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2340</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Obama announces restrictions on distribution o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2341</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Dilbert Creator Explains How Do I Know The Ema...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2342</th>\n",
       "      <td>REAL</td>\n",
       "      <td>God is on the ropes: The brilliant new science...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2343</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Two: readers pick story on meat and climate ch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2344</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Backstory: Behind the terror takedown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2345</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Deputy Shot and Killed by Fellow Deputy While ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2346</th>\n",
       "      <td>REAL</td>\n",
       "      <td>All three Republican presidential candidates b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2347</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Defense Secretary Carter endorses 3-year timel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2348</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Marco Rubio: Critics of Immigration Bill Were ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2349</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Bernie Sanders win this way: Why his admirable...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2350</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>'Russia has no intention of attacking anyone -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2351</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Iceland Election: Pirate Party prepares for ma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2352</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Egypt bombs Islamic State targets in Libya aft...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2353 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     label                                               news\n",
       "0     FAKE                       You Can Smell Hillary’s Fear\n",
       "1     FAKE  Watch The Exact Moment Paul Ryan Committed Pol...\n",
       "2     REAL        Kerry to go to Paris in gesture of sympathy\n",
       "3     FAKE  Bernie supporters on Twitter erupt in anger ag...\n",
       "4     REAL   The Battle of New York: Why This Primary Matters\n",
       "5     FAKE                                        Tehran, USA\n",
       "6     FAKE  Girl Horrified At What She Watches Boyfriend D...\n",
       "7     REAL                  ‘Britain’s Schindler’ Dies at 106\n",
       "8     REAL  Fact check: Trump and Clinton at the 'commande...\n",
       "9     REAL  Iran reportedly makes new push for uranium con...\n",
       "10    REAL  With all three Clintons in Iowa, a glimpse at ...\n",
       "11    REAL  Donald Trump’s Shockingly Weak Delegate Game S...\n",
       "12    FAKE  Strong Solar Storm, Tech Risks Today | S0 News...\n",
       "13    FAKE       10 Ways America Is Preparing for World War 3\n",
       "14    REAL                   Trump takes on Cruz, but lightly\n",
       "15    REAL                         How women lead differently\n",
       "16    FAKE  Shocking! Michele Obama & Hillary Caught Glamo...\n",
       "17    FAKE  Hillary Clinton in HUGE Trouble After America ...\n",
       "18    REAL  What's in that Iran bill that Obama doesn't like?\n",
       "19    REAL  The 1 chart that explains everything you need ...\n",
       "20    REAL  The slippery slope to Trump’s proposed ban on ...\n",
       "21    FAKE  Episode #160 – SUNDAY WIRE: ‘Hail to the Deplo...\n",
       "22    REAL  Hillary Clinton Makes A Bipartisan Appeal on S...\n",
       "23    REAL  New Senate majority leader’s main goal for GOP...\n",
       "24    FAKE              ‘Inferno’ and the Overpopulation Myth\n",
       "25    REAL  Anti-Trump forces seek last-ditch delegate revolt\n",
       "26    REAL  Sanders Trounces Clinton in W. Va. -- But Will...\n",
       "27    REAL  Donald Trump Is Changing His Campaign Slogan t...\n",
       "28    REAL  Pure chaos: Donald Trump’s campaign management...\n",
       "29    FAKE  Syrian War Report – November 1, 2016: Syrian M...\n",
       "...    ...                                                ...\n",
       "2323  FAKE  Comment on Fury as German primary school ‘forc...\n",
       "2324  REAL    Rieder: Charlie Hebdo goes on, and that matters\n",
       "2325  REAL  Obama will walk away from Iran talks if no ins...\n",
       "2326  REAL  The 2016 Republican field might be the most di...\n",
       "2327  REAL  Donald Trump may be showing us the future of r...\n",
       "2328  FAKE  Joint Way Forward Deal Does Not Lead to Peace ...\n",
       "2329  FAKE  Dakota Pipeline Protests Are Working! One Bank...\n",
       "2330  REAL  Republicans in state governments plan juggerna...\n",
       "2331  REAL       Sanders, Dem establishment battle boils over\n",
       "2332  FAKE        Election 2016: A Political System In Crisis\n",
       "2333  FAKE  After terrorizing America with Zika scaremonge...\n",
       "2334  REAL  Obama Says Terrorists Seek Legitimacy by Using...\n",
       "2335  FAKE      Why NATO is put on war footing against Russia\n",
       "2336  FAKE     Top five donors to Clinton campaign are Jewish\n",
       "2337  REAL                            The worst election ever\n",
       "2338  FAKE  Tomb Opened WhereJesus was Resurrected After C...\n",
       "2339  REAL                  The House GOP budget is a gimmick\n",
       "2340  REAL  Obama announces restrictions on distribution o...\n",
       "2341  FAKE  Dilbert Creator Explains How Do I Know The Ema...\n",
       "2342  REAL  God is on the ropes: The brilliant new science...\n",
       "2343  REAL  Two: readers pick story on meat and climate ch...\n",
       "2344  REAL              Backstory: Behind the terror takedown\n",
       "2345  FAKE  Deputy Shot and Killed by Fellow Deputy While ...\n",
       "2346  REAL  All three Republican presidential candidates b...\n",
       "2347  REAL  Defense Secretary Carter endorses 3-year timel...\n",
       "2348  REAL  Marco Rubio: Critics of Immigration Bill Were ...\n",
       "2349  REAL  Bernie Sanders win this way: Why his admirable...\n",
       "2350  FAKE  'Russia has no intention of attacking anyone -...\n",
       "2351  FAKE  Iceland Election: Pirate Party prepares for ma...\n",
       "2352  REAL  Egypt bombs Islamic State targets in Libya aft...\n",
       "\n",
       "[2353 rows x 2 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv[adv.news.notnull()]\n",
    "adv[adv.label.notnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "adv=adv[pd.notnull(adv['news'])]\n",
    "adv=adv[pd.notnull(adv['label'])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## All the null(nan) values are removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>news</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2324</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2325</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2326</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2327</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2331</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2332</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2333</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2334</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2335</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2336</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2337</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2338</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2339</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2340</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2341</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2342</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2343</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2344</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2345</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2346</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2347</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2348</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2349</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2350</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2351</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2352</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2353 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      label   news\n",
       "0     False  False\n",
       "1     False  False\n",
       "2     False  False\n",
       "3     False  False\n",
       "4     False  False\n",
       "5     False  False\n",
       "6     False  False\n",
       "7     False  False\n",
       "8     False  False\n",
       "9     False  False\n",
       "10    False  False\n",
       "11    False  False\n",
       "12    False  False\n",
       "13    False  False\n",
       "14    False  False\n",
       "15    False  False\n",
       "16    False  False\n",
       "17    False  False\n",
       "18    False  False\n",
       "19    False  False\n",
       "20    False  False\n",
       "21    False  False\n",
       "22    False  False\n",
       "23    False  False\n",
       "24    False  False\n",
       "25    False  False\n",
       "26    False  False\n",
       "27    False  False\n",
       "28    False  False\n",
       "29    False  False\n",
       "...     ...    ...\n",
       "2323  False  False\n",
       "2324  False  False\n",
       "2325  False  False\n",
       "2326  False  False\n",
       "2327  False  False\n",
       "2328  False  False\n",
       "2329  False  False\n",
       "2330  False  False\n",
       "2331  False  False\n",
       "2332  False  False\n",
       "2333  False  False\n",
       "2334  False  False\n",
       "2335  False  False\n",
       "2336  False  False\n",
       "2337  False  False\n",
       "2338  False  False\n",
       "2339  False  False\n",
       "2340  False  False\n",
       "2341  False  False\n",
       "2342  False  False\n",
       "2343  False  False\n",
       "2344  False  False\n",
       "2345  False  False\n",
       "2346  False  False\n",
       "2347  False  False\n",
       "2348  False  False\n",
       "2349  False  False\n",
       "2350  False  False\n",
       "2351  False  False\n",
       "2352  False  False\n",
       "\n",
       "[2353 rows x 2 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2353"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(adv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the length of news"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>news</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>You Can Smell Hillary’s Fear</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Watch The Exact Moment Paul Ryan Committed Pol...</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>REAL</td>\n",
       "      <td>Kerry to go to Paris in gesture of sympathy</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FAKE</td>\n",
       "      <td>Bernie supporters on Twitter erupt in anger ag...</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>REAL</td>\n",
       "      <td>The Battle of New York: Why This Primary Matters</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label                                               news  length\n",
       "0  FAKE                       You Can Smell Hillary’s Fear      28\n",
       "1  FAKE  Watch The Exact Moment Paul Ryan Committed Pol...      85\n",
       "2  REAL        Kerry to go to Paris in gesture of sympathy      43\n",
       "3  FAKE  Bernie supporters on Twitter erupt in anger ag...      84\n",
       "4  REAL   The Battle of New York: Why This Primary Matters      48"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv['length']=adv['news'].map(lambda text: len(text))\n",
    "adv.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting the graph according to the length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x214725f5cc0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nB8SQQQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x21472745c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "adv.length.plot(bins=20, kind='hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2353.000000\n",
       "mean       65.914152\n",
       "std        24.402665\n",
       "min         5.000000\n",
       "25%        50.000000\n",
       "50%        64.000000\n",
       "75%        79.000000\n",
       "max       289.000000\n",
       "Name: length, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.length.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Difference between the length of Fake and Real Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x0000021472A63278>,\n",
       "       <matplotlib.axes._subplots.AxesSubplot object at 0x00000214729A5198>], dtype=object)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x21472a854e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "adv.hist(column='length', by='label', bins=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def tokenize(news):\n",
    "    news2 = 'news -' + str(news)  # convert bytes into proper unicode\n",
    "    return TextBlob(news).words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                         You Can Smell Hillary’s Fear\n",
       "1    Watch The Exact Moment Paul Ryan Committed Pol...\n",
       "2          Kerry to go to Paris in gesture of sympathy\n",
       "3    Bernie supporters on Twitter erupt in anger ag...\n",
       "4     The Battle of New York: Why This Primary Matters\n",
       "Name: news, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.news.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## news converted into Tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                   [You, Can, Smell, Hillary’s, Fear]\n",
       "1    [Watch, The, Exact, Moment, Paul, Ryan, Commit...\n",
       "2    [Kerry, to, go, to, Paris, in, gesture, of, sy...\n",
       "3    [Bernie, supporters, on, Twitter, erupt, in, a...\n",
       "4    [The, Battle, of, New, York, Why, This, Primar...\n",
       "Name: news, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adv.news.head().apply(tokenize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Strong', 'JJ'),\n",
       " ('Solar', 'NNP'),\n",
       " ('Storm', 'NNP'),\n",
       " ('Tech', 'NNP'),\n",
       " ('Risks', 'NNP'),\n",
       " ('Today', 'NNP')]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TextBlob(\"Strong Solar Storm, Tech Risks Today\").tags"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalizing the text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                   [You, Can, Smell, Hillary’s, Fear]\n",
       "1    [Watch, The, Exact, Moment, Paul, Ryan, Commit...\n",
       "2    [Kerry, to, go, to, Paris, in, gesture, of, sy...\n",
       "3    [Bernie, supporter, on, Twitter, erupt, in, an...\n",
       "4    [The, Battle, of, New, York, Why, This, Primar...\n",
       "Name: news, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def lemmatize(news):\n",
    "    news2 = 'news -' + str(news).lower()\n",
    "    words = TextBlob(news).words\n",
    "    # for each word, take its \"base form\" = lemma \n",
    "    return [word.lemma for word in words]\n",
    "\n",
    "adv.news.head().apply(lemmatize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conversion of data to vectors which could be understood by Machine Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7934"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bow_transformer = CountVectorizer(analyzer=lemmatize).fit(adv['news'])\n",
    "len(bow_transformer.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "news4=adv['news'][10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'With all three Clintons in Iowa, a glimpse at the fire that has eluded Hillary Clinton’s campaign'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<1x7934 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 17 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bow4 = bow_transformer.transform([news4])\n",
    "bow4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 7934)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bow4.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Attendant'"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bow_transformer.get_feature_names()[576]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sparse Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sparsity: 0.13%'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news_bow = bow_transformer.transform(adv['news'])\n",
    "\n",
    "'sparsity: %.2f%%' % (100.0 * news_bow.nnz / (news_bow.shape[0] * news_bow.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('sparse matrix shape:', (2353, 7934))"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'sparse matrix shape:', news_bow.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('number of non-zeros:', 24537)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'number of non-zeros:', news_bow.nnz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TF_IDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<1x7934 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 17 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_transformer = TfidfTransformer().fit(news_bow)\n",
    "tfidf4 = tfidf_transformer.transform(bow4)\n",
    "tfidf4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating the inverse document frequency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.6844297461403865"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_transformer.idf_[bow_transformer.vocabulary_['u']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.6652589991521127"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_transformer.idf_[bow_transformer.vocabulary_['university']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2353, 7934)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news_tfidf = tfidf_transformer.transform(news_bow)\n",
    "news_tfidf.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TRAINING A MODEL:As the text is represented as vectors , we can now train our classifiers\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NAIVE BAYES CLASSIFIER on TRAINING DATA, no testing data just to test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 12 ms\n"
     ]
    }
   ],
   "source": [
    "%time spam_detector = MultinomialNB().fit(news_tfidf, adv['label'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "spam_detector=MultinomialNB().fit(news_tfidf, adv['label'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spam_detector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classifying the random text (news)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('predicted:', 'REAL')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'predicted:', spam_detector.predict(tfidf4)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('expected:', 'FAKE')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'expected:', adv.label[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['FAKE', 'FAKE', 'REAL', ..., 'REAL', 'FAKE', 'REAL'], \n",
       "      dtype='<U4')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_predictions = spam_detector.predict(news_tfidf)\n",
    "all_predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## checking the accuracy score for all predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('accuracy', 0.94050148746281348)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'accuracy', accuracy_score(adv['label'], all_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('confusion matrix\\n', array([[1126,   80],\n",
       "        [  60, 1087]]))"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'confusion matrix\\n', confusion_matrix(adv['label'], all_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'(row=expected, col=predicted)'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'(row=expected, col=predicted)'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Confusion matrix and plot tats helps in calculating the mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x2147b09dbe0>"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2147ac74d68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(confusion_matrix(adv['label'], all_predictions), cmap=plt.cm.binary, interpolation='nearest')\n",
    "plt.title('confusion matrix')\n",
    "plt.colorbar()\n",
    "plt.ylabel('expected label')\n",
    "plt.xlabel('predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "       FAKE       0.95      0.93      0.94      1206\n",
      "       REAL       0.93      0.95      0.94      1147\n",
      "\n",
      "avg / total       0.94      0.94      0.94      2353\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print (classification_report(adv['label'], all_predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training data during model fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1882, 471, 2353)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msg_train, msg_test, label_train, label_test = train_test_split(adv['news'], adv['label'], test_size=0.2)\n",
    "\n",
    "len(msg_train), len(msg_test), len(msg_train) + len(msg_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The above calculations tells that the test size of the entire dataset is 5% i.e. 471 messages and the rest of the data is training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('bow', CountVectorizer(analyzer='char')),  # strings to token integer counts\n",
    "    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores\n",
    "    ('classifier', MultinomialNB()),  # train on TF-IDF vectors w/ Naive Bayes classifier\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import _pickle as cPickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "scores = cross_val_score(pipeline,  # convert news into models\n",
    "                         msg_train,  # training data\n",
    "                         label_train,  # training labels\n",
    "                         cv=10,  # split data randomly into 10 parts: 9 for training, 1 for scoring\n",
    "                         scoring='accuracy',  # which scoring metric?\n",
    "                         n_jobs=-1,  # -1 = use all cores = faster\n",
    "                         )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.61904762,  0.65608466,  0.66137566,  0.64361702,  0.65425532,\n",
       "        0.57446809,  0.64361702,  0.63829787,  0.65425532,  0.62032086])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### if results wildly differ from the previous results then the data is not goof or it might be bad model variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.63653394304207811, 0.024802607898472974)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores.mean(), scores.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
    "                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n",
    "    \n",
    "    plt.figure()\n",
    "    plt.title(title)\n",
    "    if ylim is not None:\n",
    "        plt.ylim(*ylim)\n",
    "    plt.xlabel(\"Data\")\n",
    "    plt.ylabel(\"Score\")\n",
    "    train_sizes, train_scores, test_scores = learning_curve(\n",
    "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "    plt.grid()\n",
    "\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
    "                     color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
    "             label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n",
    "             label=\"Cross-validation score\")\n",
    "\n",
    "    plt.legend(loc=\"best\")\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 7.12 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<module 'matplotlib.pyplot' from 'C:\\\\Users\\\\navkiran\\\\anaconda3 4.3.1\\\\lib\\\\site-packages\\\\matplotlib\\\\pyplot.py'>"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkMAAAHHCAYAAAC88FzIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzsnXdcFMf7xz97hTvgjiYgKAYVe+8NQWMjgiZGjRr9RomJ\n+rUriSbGBkbSjMaoiSb5JZoYTUwUE79iQ4O9RBN7b4gNadI57m5vfn+Me40DDgTugHn72hfu7Ozu\n3Nzt7mef55lnOEIIAYPBYDAYDEYNRWTrBjAYDAaDwWDYEiaGGAwGg8Fg1GiYGGIwGAwGg1GjYWKI\nwWAwGAxGjYaJIQaDwWAwGDUaJoYYDAaDwWDUaJgYYjAYDAaDUaNhYojBYDAYDEaNhokhBoPBYDAY\nNRomhhgMBsMKwsPDUb9+/TLtGxkZCY7jyrdB1YCEhARwHIcNGzbYuimMGg4TQwwGo1rw6NEjREZG\n4ty5c7ZuSrVl8+bNWLlypa2bwWCUOxybm4zBYFQHzpw5g86dO2P9+vUIDw8v9+NrNBrodDrIZLJS\n76vVaqHVaiGXy8u9XZXJoEGDcOnSJSQkJJTL8QghKCgogFQqhVgsLpdjMhhlgVmGGIxqQG5urq2b\nUOXIy8srVX2pVFomIQQAEomkyguhioDjOMjlciaEGDaHiSEGwwL37t3DlClT0LRpUzg6OqJWrVp4\n7bXXLL4RZ2RkYPbs2ahfvz5kMhn8/PwwduxYpKam6uuoVCpERkaiSZMmkMvl8PX1xdChQ3H79m0A\nwMGDB8FxHA4ePGhybEsxFeHh4VAoFLh9+zZCQ0OhVCoxZswYAMCRI0fw2muv4YUXXoBMJkO9evUw\ne/Zs5OfnF2r3tWvXMGLECHh5ecHR0RFNmzbF/PnzAQDx8fHgOA7bt28vtN/mzZvBcRxOnDhhse/O\nnDkDjuPw448/Ftq2d+9ecByHnTt3AgCys7Mxa9Ysfd95e3ujf//++Pfffy0euygOHjyIzp07AwDe\nfPNNcBxn0m+9e/dGq1at8M8//yA4OBhOTk744IMPAAB//vknwsLCUKdOHchkMgQEBODDDz8Ez/Mm\n5zCPGRK+m88//xzffvstAgICIJPJ0LlzZ5w+fdpkX0sxQxzHYdq0afjjjz/QqlUryGQytGzZEnv2\n7LH4+Tp16gS5XI6AgAB88803Vsch3bx5E8OGDYOPjw/kcjn8/PwwatQoZGZmmtT7+eef0bFjRzg6\nOsLDwwOjRo3C/fv39dt79+6N2NhY3Lt3T9+/JcVQxcXFoWfPnnBzc4NCoUDTpk31/W7ch8L3JFwH\nlhbzc+3evRtBQUFwdnaGUqlEWFgYLl++XGJ/MBiWkNi6AQyGPXL69GkcP34co0aNgp+fHxISErB2\n7Vr07t0bV65cgZOTEwAgJycHQUFBuHr1KsaPH48OHTogNTUVO3bswIMHD+Dp6Qme5zFo0CAcOHAA\no0aNwsyZM5GdnY24uDhcunQJAQEBpW6fVqtFSEgIevbsic8//1zfnt9//x15eXmYPHkyatWqhb//\n/hurV6/GgwcP8Pvvv+v3v3DhAoKCgiCVSjFx4kTUr18ft2/fxv/+9z9ER0ejd+/eqFevHjZt2oRX\nX33V5NybNm1CQEAAunfvbrFtnTp1QsOGDfHbb79h3LhxJtu2bNkCd3d3hISEAAD++9//YuvWrZg2\nbRpatGiBtLQ0HD16FFevXkWHDh2s7o/mzZtjyZIlWLRoESZOnIigoCAAQI8ePfR10tLSMHDgQIwa\nNQr/+c9/ULt2bQDAhg0boFAoEBERAYVCgb/++guLFi1CVlYWli1bVuK5N2/ejOzsbEyaNAkcx+Gz\nzz7D0KFDcefOHUil0mL3PXr0KGJiYjBlyhQolUqsWrUKw4YNQ2JiImrVqgUAOHv2LF566SX4+voi\nKioKPM9jyZIl8PLyKrFtarUaISEhKCgowPTp0+Hj44OHDx9i586dyMjIgKurKwAgOjoaCxcuxIgR\nI/D2228jJSUFq1evRnBwMM6ePQs3NzfMnz8fmZmZePDgAb744gsAgEKhKPLcly9fxqBBg9CmTRss\nWbIEMpkMt27dwrFjx4rcp3nz5ti4caNJWUZGBiIiIuDt7a0v27hxI8aNG4eQkBB8+umnyMvLw9q1\na9GzZ0+cPXu2zIHujBoMYTAYhcjLyytUduLECQKA/PTTT/qyRYsWEQAkJiamUH2dTkcIIeSHH34g\nAMiKFSuKrBMfH08AkPj4eJPtd+/eJQDI+vXr9WXjxo0jAMj7779vVbs//vhjwnEcuXfvnr4sODiY\nKJVKkzLj9hBCyLx584hMJiMZGRn6suTkZCKRSMjixYsLnceYefPmEalUStLT0/VlBQUFxM3NjYwf\nP15f5urqSqZOnVrssazl9OnThfpKoFevXgQAWbduXaFtlvps0qRJxMnJiahUKn3ZuHHjiL+/v35d\n+G5q1apl8jn//PNPAoD873//05ctXryYmN9uARAHBwdy69Ytfdn58+cJALJ69Wp92eDBg4mTkxN5\n+PChvuzmzZtEIpEUOqY5Z8+eJQDI77//XmSdhIQEIhaLSXR0tEn5xYsXiUQiMSkPCwsz6YPi+OKL\nLwgAkpKSUmQdS79vY3Q6HRk0aBBRKBTk8uXLhBBCsrOziZubG5kwYYJJ3aSkJOLq6lqonMGwBuYm\nYzAs4OjoqP+/RqNBWloaGjVqBDc3NxMXzrZt29C2bdtC1hMAehfGtm3b4OnpienTpxdZpyxMnjy5\n2Hbn5uYiNTUVPXr0ACEEZ8+eBQCkpKTg8OHDGD9+PF544YUi2zN27FgUFBRg69at+rItW7ZAq9Xi\nP//5T7FtGzlyJDQaDWJiYvRl+/btQ0ZGBkaOHKkvc3Nzw6lTp/Do0SMrP3XZkclkePPNNwuVG/dZ\ndnY2UlNTERQUhLy8PFy7dq3E444cORLu7u76dcEqdefOnRL37devn4llsE2bNnBxcdHvy/M89u/f\njyFDhqBOnTr6eo0aNcLAgQNLPL5g+dm7d2+RMVIxMTHQ6XQYMWIEUlNT9YuPjw8aN26M+Pj4Es9j\nCTc3NwDUDanT6cp0jA8//BA7d+7Ehg0b0KJFCwDU9ZaRkYHXX3/dpL1isRhdu3Ytc3sZNRsmhhgM\nC+Tn52PRokWoV68eZDIZPD094eXlhYyMDJNYi9u3b6NVq1bFHuv27dto2rQpJJLy80pLJBL4+fkV\nKk9MTER4eDg8PDygUCjg5eWFXr16AYC+3cKDtqR2N2vWDJ07d8amTZv0ZZs2bUK3bt3QqFGjYvdt\n27YtmjVrhi1btujLtmzZAk9PT/Tp00df9tlnn+HSpUuoV68eunTpgsjISKtERFmoW7cuHBwcCpVf\nvnwZr776KlxdXeHi4gIvLy+92DOPq7GEuaAUhNHTp09Lva+wv7BvcnIy8vPzLfZ3Sd8BADRo0AAR\nERH4v//7P3h6eiIkJARfffWVyee6efMmCCFo3LgxvLy8TJarV68iOTm5xPNYYuTIkQgMDMTbb7+N\n2rVrY9SoUfjtt9+sFkZ79uxBVFQU5s2bh2HDhpm0FwD69OlTqL379u0rc3sZNRsWM8RgWGD69OlY\nv349Zs2ahe7du8PV1RUcx2HUqFFlfsstjqIsROZBvAIymQwikahQ3f79+yM9PR3vvfcemjVrBmdn\nZzx8+BDh4eFlavfYsWMxc+ZMPHjwAAUFBTh58iTWrFlj1b4jR45EdHQ0UlNToVQqsWPHDrz++usm\nonDEiBEICgrC9u3bsW/fPixbtgyffvopYmJirLJ8lAZjC5BARkYGevXqBRcXFyxZsgQBAQGQy+X4\n999/8d5771nVZ0WNhCJWZC15nn2tZfny5QgPD8eff/6Jffv2YcaMGfj4449x8uRJ+Pn5QafTgeM4\n7N6922J7iosLKg5HR0ccPnwY8fHxiI2NxZ49e7Blyxb06dMH+/btK3YE2d27dzFmzBj0798fS5cu\nNdkmfCcbN26Ej49PoX3L86WDUXNgvxoGwwJbt27FuHHjsHz5cn2ZSqVCRkaGSb2AgABcunSp2GMF\nBATg1KlT0Gg0RQbUCtYE8+Pfu3fP6jZfvHgRN27cwI8//oixY8fqy+Pi4kzqNWzYEABKbDcAjBo1\nChEREfjll1+Qn58PqVRq4uYqjpEjRyIqKgrbtm1D7dq1kZWVhVGjRhWq5+vriylTpmDKlClITk5G\nhw4dEB0dXWoxVBaX48GDB5GWloaYmBgEBwfry+/evVvqY1UE3t7ekMvluHXrVqFtlsqKonXr1mjd\nujUWLFiA48ePIzAwEOvWrcPSpUsREBAAQggaNGiAJk2aFHuc0vaxSCRC37590bdvX6xYsQIfffQR\n5s+fj/j4ePTr18/iPvn5+Rg6dCjc3Nzwyy+/FBL9glvR29u7yGMwGKWFuckYDAuIxeJCb+erV68u\nZKkZNmwYzp8/b3EIurD/sGHDkJqaatGiItTx9/eHWCzG4cOHTbZ//fXXpWqz8TGF/3/55Zcm9by8\nvBAcHIwffvgBiYmJFtsj4OnpiYEDB+Lnn3/Gpk2b8NJLL8HT09Oq9jRv3hytW7fGli1bsGXLFvj6\n+poIDp7nC7mhvL29UadOHRQUFOjLUlNTce3atRLzAjk7OwMoLCiLw1KfqdXqUvV7RSIWi9GvXz/8\n8ccfJnFVt27dwu7du0vcPysrC1qt1qSsdevWEIlE+j4eOnQoxGIxoqKiCn3/hBCkpaXp152dna1y\nHQJAenp6obJ27doBgMn3a85///tf3LhxA9u3bzeJxRIICQmBi4sLPvroI2g0mkLbU1JSrGofg2EM\nswwxGBYYNGgQNm7cCFdXV7Ro0QInTpzA/v379cOdBebMmYOtW7fitddew/jx49GxY0ekp6djx44d\nWLduHdq2bYuxY8fip59+QkREBP7++28EBQUhNzcX+/fvx5QpU/DKK6/A1dUVr732GlavXg2O4xAQ\nEICdO3eWKv6hWbNmCAgIwLvvvouHDx/CxcUF27Ztsxi7smrVKvTs2RMdOnTAxIkT0aBBAyQkJCA2\nNrbQdBZjx47F8OHDAdCA1tIwcuRILFq0CHK5HG+99ZbJW352djb8/PwwfPhwtG3bFgqFAvv378fp\n06dNLHJr1qxBVFQU4uPj0bt37yLPFRAQADc3N6xbtw5KpRLOzs7o2rUrGjRoUOQ+PXr0gLu7O8aN\nG4cZM2aA4zhs3LixXN1Uz0tkZCT27duHwMBATJ48GTzPY82aNWjZsiXOnz9f7L5//fUXpk2bhtde\new1NmjSBVqvFxo0bIRaL9XE4AQEBWLp0KebNm4eEhAQMGTIESqUSd+/exfbt2zFx4kS8++67AICO\nHTtiy5YtiIiIQOfOnaFQKDB48GCL516yZAkOHz6MsLAw+Pv7Izk5GV9//TX8/PzQs2dPi/vExsbi\np59+wrBhw3DhwgVcuHBBv02hUGDIkCFwcXHB2rVr8cYbb6BDhw4YNWoUvLy8kJiYiNjYWAQGBlrt\nymUw9NhgBBuDYfc8ffqUvPnmm8TT05MoFAoSEhJCrl27Rvz9/cm4ceNM6qalpZFp06aRunXrEgcH\nB+Ln50fGjRtHUlNT9XXy8vLI/PnzSYMGDYhUKiU+Pj5k+PDh5Pbt2/o6KSkpZNiwYcTJyYm4u7uT\nSZMmkUuXLlkcWu/s7Gyx3VeuXCH9+vUjCoWCeHp6kgkTJuiHa5sPX7506RJ59dVXiZubG5HL5aRp\n06Zk4cKFhY5ZUFBA3N3diaurK8nPzy9VP968eZMAIADI0aNHCx13zpw5pG3btkSpVBJnZ2fStm1b\n8vXXX5vUE4alm6cdsMSff/5JWrRooR92LnzmXr16kZYtW1rc59ixY6Rbt27E0dGR1KlTh8ydO5fs\n3bu30DmLGlq/bNmyQscEYJJ+oKih9ZbSClj6jR04cIC0b9+eODg4kIYNG5JvvvmGvPPOO0Qulxfb\nH3fu3CHjx48nAQEBRC6XEw8PD/Liiy+S/fv3F6q7bds20rNnT+Ls7EycnZ1Js2bNyNSpU8n169f1\ndXJycsjo0aOJm5sbAVDsMPsDBw6QV155hdSpU4c4ODiQOnXqkNdff53cuHFDX8d8aP369ev1vxfz\nxfxc8fHxJCQkhLi6uhK5XE4CAgJIeHg4OXPmTLF9wmBYgs1NxmAwikWr1aJOnToYPHgwvv/+e1s3\nh/GMIUOG4PLly/rRVQwGo+ywmCEGg1Esf/zxB1JSUkyCshmVi/l0Kjdv3sSuXbuKdRsyGAzrYZYh\nBoNhkVOnTuHChQv48MMP4enpWer5whjlh6+vL8LDw9GwYUPcu3cPa9euRUFBAc6ePYvGjRvbunkM\nRpWHBVAzGAyLrF27Fj///DPatWtnMlEso/J56aWX8MsvvyApKQkymQzdu3fHRx99xIQQg1FOMMsQ\ng8FgMBiMGg2LGWIwGAwGg1GjYWKIwWAwGAxGjYbFDFlAp9Ph0aNHUCqVzzWrOIPBYDAYjMqDEILs\n7GzUqVOn0FQuxcHEkAUePXqEevXq2boZDAaDwWAwysD9+/fh5+dndX0mhiygVCoB0M50cXGxcWtM\n0Wg02LdvHwYMGFDkpJ81BdYXBlhfUFg/GGB9QWH9YKAm9EVWVhbq1aunf45bCxNDFhBcYy4uLnYp\nhpycnODi4lJtf8zWwvrCAOsLCusHA6wvKKwfDNSkvihtiAsLoGYwGAwGg1GjYWKIwWAwGAxGjYaJ\nIQaDwWAwGDUaFjP0HPA8D41GU6nn1Gg0kEgkUKlU4Hm+Us9tb7C+MGCPfSGVSiEWi23dDAaDwSgR\nJobKACEESUlJyMjIsMm5fXx8cP/+/RqfA4n1hQF77Qs3Nzf4+PjYVZsYDAbDHCaGyoAghLy9veHk\n5FSpN3qdToecnBwoFIpSJZSqjrC+MGBvfUEIQV5eHpKTkwHQWdcZDAbDXmFiqJTwPK8XQrVq1ar0\n8+t0OqjVasjlcrt46NkS1hcG7LEvHB0dAQDJycnw9vZmLjMGg2G32MddswohxAg5OTnZuCUMhv0j\nXCeVHVvHYDAYpYGJoTLCYiAYjJJh1wmDwagKMDHEYDAYDAajRsPEEKNc8PHxwbp166yuv2fPHnAc\nB5VKVYGtYjAYDAajZJgYsiU8Dxw8CPzyC/1bgflhOI4rdomMjHyu41+8eBHjxo2zun6fPn3w+PFj\nyOXy5zovg8FgMBjPCxtNZitiYoCZM4EHDwxlfn7Al18CQ4eW++keP36s//+WLVuwaNEiXL9+XV+m\nUCgK7UMIAc/zkEhK/pl4eXmVqj0ODg7w8fEp1T5VAY1GU+0nQGQwGIzqBrMM2YKYGGD4cFMhBAAP\nH9LymJhyP6WPj49+cXV1BcdxJmUKhULvutq3bx/atWsHBwcHnDlzBteuXcOgQYPg7e0NpVKJbt26\n4eDBg4WOL7jJVCoVOI7Djz/+iEGDBsHJyQlNmzbF7t279fXN3WTr1q2Dj48Pdu7ciaZNm0KpVGLQ\noEFISUnR76NWqzF58mS4uLjAy8sLUVFRGD9+PF5//fUiP/ft27cRGhoKNzc3ODs7o3Xr1ti/f79+\n+4ULFzBw4EAolUq4uLigV69eSExMBEDTKCxcuBB16tSBTCZDx44dceDAAf2+165dA8dx2Lp1K3r2\n7AmZTIZt27YBAOLj49GjRw84OjrihRdewDvvvIP8/PwyfnuMcoUQQK0GNBpAp7N1axgMhh3AxFB5\nQAiQm2vdkpUFzJhB97F0HIBajLKyrDuepeM8J/PmzcMXX3yBq1evolmzZsjJycGQIUMQHx+Pf/75\nB8HBwRg0aJCJtckSixcvxrhx43DhwgW8+OKLGD16NLKysoqsn5GRgTVr1uCXX35BfHw8rl+/jvff\nf1+//cMPP8S2bduwadMmHD58GPfv3zcRNpaYNGkSRCIRjh49igsXLiA6Olqf/yYhIQFBQUFwdXXF\nwYMHcebMGYSHh+uHgX/22Wf46quvsGrVKpw/fx7BwcEICwtDQkKCyTnef/99zJ07F9euXUPv3r1x\n9epVDB48GKNHj8bFixexadMmxMXFISIioti2MiqYggIgI4O+hCQkAHfv0uXOHVqWlASkp9M62dn0\n+lKpqHDi+Qq51hgMhp1AGIXIzMwkAEhmZmahbfn5+eTKlSskPz/fUJiTQwi9VVb+kpNT6s+3fv16\n4urqWqh89+7dBADZs2dPiccICAgg3333nX69du3aZO3atfo+AkCWLl2q356WlkYAkPj4eJNzCf24\ndu1aAoA8ePBAv8/y5cuJv7+/ft3NzY2sXr1av65SqYiPjw8ZMWJEke1s3Lgx+eSTTyxumz17Nmna\ntCnRarUWt3t4eJDly5eblLVu3ZpEREQQQgi5evUqAUDWrVtnUmfMmDFkxowZJmVxcXFEKpUSjUZT\nZFufB57nydOnTwnP8xVy/LJi8XqpQNRqNfnjjz+IWq2mBSoVIRkZhCQmEnLtGiEXL9K/d+8SkpBA\nyO3bhNy8Scj164RcuULIpUu0zqVLdLlyhW67eZPWvXePkMePCUlJIeTpU0IyM+k1mJdHSEEBIVot\nITpdpXzWkijUFzUU1g8GakJfFPf8Lg4WM8QoRKdOnUzWMzMzsXjxYuzZswdJSUnQarXIz8/Xu5OK\nok2bNvr/e3h4wMHBQT89gyU8PDxQt25d/bqvr6++/pMnT5CRkYEuXbrot0ulUrRq1arYNsyaNQsz\nZ87Ezp070a9fPwwfPhwtW7YEAJw7dw69evWymBk5OTkZ6enpCAwMNCkPDAzE1atXTcrM++v8+fO4\nefMmvv/+e30ZIQQajQb3799HgwYNim0zoxzIygLy8uii0QBSKSCXA0qlab2S4rt0OmoVEixDKhU9\npjDYgRCA4wCRiC5iMV2XSgGJBHBwoGVisWG78Feoy2AwbA4TQ+WBkxOQk2Nd3cOHgdDQkuvt2gUE\nBxcq1ul0yMrKgouLC512oQIyYTs7O5usz5w5EydOnMCnn36KgIAAODo6YvDgwVCr1cUexzyQmOM4\n6IqJ0ShtfWuYMmUKwsLCEBsbi7179yI6Ohpr1qzBxIkT9e6y58W8v3JycjB9+nRMmjSpUF0/P79y\nOSfDDLUayM8HMjPp+sOHgExGF3MBVBoEkWONaBKEk05HXXJ5eYZyQfRwnEEQCaLIwYEKJ6nUsmAS\n6jIYjAqDiaHygOMAswdikQwYQEeNPXxoOQaB4+j2AQPojdAc4Ybr7FxpN8hjx45h4sSJGDJkCAAa\n23P//v1KObdA7dq14ebmhtOnT+utQxqNBpcuXUKwBdFojL+/P6ZMmYIpU6Zg9uzZ+L//+z9MnDgR\nbdq0wfbt28HzfCHrkDD33LFjx9C1a1d9+fHjx9G/f/9iz9ehQwdcuXIFjRo1KuOnZViFWk0tNUJ8\nj1ptEB3u7pavn4pCECwljbwkxGBp0umo1aqgwGB5EixNgrXJWBgJliaJpGhLExNNDEaZYGKoshGL\n6fD54cPpDc9YEAk38pUrK/dGXgKNGzfG77//jpCQEPA8j/nz59tkMtBp06ZhyZIlqF+/PgICAvD5\n558jNze32Ckfpk2bhldeeQWNGjVCWloaDh8+rHetzZo1C2vXrsWYMWMwd+5cKJVKHDt2DEFBQQgI\nCMC7776LpUuXwt/fH61atcI333yD69evY8eOHcW284MPPkCPHj0we/ZshIeHw9HREZcvX8ahQ4ew\ncuXKcu2TGodGQy1AxgJIIqEuMIWiQnN1lQscR9trjWgydtFptVQ0ZWcXHgFnLIg4jgomqdRwP8nJ\nKeyuE4mYi47BMIKJIVswdCiwdavlPEMrV1ZInqHnYdWqVXjrrbfQrVs3eHt7Y/78+UhPT6/0dixc\nuBApKSl4/fXX4eDggEmTJiEwMLDYxI0ajQaTJk3Co0eP4OrqitDQUHzxxRcAqLXpr7/+wty5c9Gz\nZ09IpVJ06NABffr0AQDMmTNH7/JKS0tDq1atEBsbC39//2Lb2bFjRxw8eBALFixAYGAgOI5Do0aN\nMGbMmPLrjJqEsQDKy6OiwFgAVUcEd1pJL0XGoklwyQkxTVotrfPggalbztiKJViaJJLCFibhLxNN\njBoARwgbL2pOVlYWXF1dkZmZCRcXF5NtKpUKd+/eRYMGDZ4/ezLPA0eOAI8fA76+QFBQiTe/QjFD\nNRiNRoNGjRphwoQJWLBgga2bY1Ps9XdR5utFEEC5udSyIQggIQ6oqN14Hrv+/RehHTpAakfWVVtQ\nqC/Mg8EFAWVuTbMUDC4s5mLJ3Cplh2g0GuzatQuhoaE1PiFqTeiL4p7fxcEsQ7ZELAZ697Z1K6oM\nt2/fxqFDhxAUFIT8/HysWLECT548wciRI23dNEZ5oNHQGKCcHIMAEoupBcjamDxG0ZRHMLi5W99S\nMLgwkq4oS5MdiXUGQ4CJIUaVgeM4fPfdd5g1axY4jkObNm3w559/IiAgwNZNY5QVrZZagAQBpFbT\nh6VcTkdK2qm1oVpTXsHgApaCwQVLk3kwuLlwYjAqCSaGGFWGhg0b4sSJE/p1wTXEqGIYCyAhy7NY\nTN1fbm5MAFUVShMMbuySE4LBBQuUMIIOKDoYvKi0A9XU1cOofJgYYjAYFY9WawiAzs6mAkiwALm7\nMwFUnRFEU0kUFwwujKAzTnIpxJAplYZYshoeJ8YoO0wMMRiMisHYjfLwIRVEHMcEEMMy1o6gAwy/\nKyHPFEDFkLMzda8K4oj9xhhWwsQQg8EoP4S3e+ENX5gZXiRiLjBG+SGIJgcHuq7T0XizzEwgLc2Q\nNkChYK40hlUwMcRgMJ4PcwEkBM8az9nF3tIZFYngchXSN2i1VBylpBhcbA8eAK6u9LcolzOXGsME\nJoYYDEbpKU4AsYcMw9YIgd1OToY8SsIkuwAVRE5O1K0mk1ErEhu9VqNhYojBYFgHE0CMqoxCQX+n\ngkstKwtITzd1qTk6GsQRo0bBpDCj2tK7d2/MmjVLv16/fv0S5wbjOA5//PHHc5+7vI5jc4QgaCGH\njFptmOaBTQ7KqIoILjUXF8DDg1qHCKEutcREICGB/k1Pp6kfhN87o1rDLEM2hNfxOJJ4BI+zH8NX\n6YugF4IHkgkqAAAgAElEQVQgFlXsG3ZSUhKio6MRGxuLhw8fwtvbG+3atcOsWbPQt2/fCj23rTl9\n+jScyzmTcWRkJP744w+cO3fOpPzx48dwd3cv13NVGswCxKhJiMXUIuToSNfVaupSy8qiv3mZjG5T\nKJhLrRrDxJCNiLkag5l7ZuJBlmGiVj8XP3z50pcY2rxiJmpNSEhAYGAg3NzcsGzZMrRu3RoajQZ7\n9+7F1KlTce3aNYv7aTSaajGPjZeXV6Wdy8fHp9LOVS6UIIAIIeB5HhL2EGBUdxwcDG4yQqhFNDsb\nePrUMIJNqTS41KRSNjigGsDubDYg5moMhv823EQIAcDDrIcY/ttwxFyNqZDzTpkyBRzH4e+//8aw\nYcPQpEkTtGzZEhERETh58qS+HsdxWLt2LV5++WU4OzsjOjoaAHDo0CF06dIFMpkMvr6+eP/996E1\nMiFv3boVrVu3hqOjI2rVqoV+/fohNzcXAHDw4EF06dIFzs7OcHNzQ2BgIO7du2exnfv27YNcLkdG\nRoZJ+cyZM/UzyqelpWH06NFo0aIFFAoFWrdujV9++aXYz2/uJrt58yaCg4Mhl8vRokULxMXFFdrn\nvffeQ5MmTeDk5ISGDRti4cKF0Gg0AIANGzYgKioK58+fB8dx4DgOGzZs0PehsZvs4sWL6NOnj75v\nJk6ciJycHP328PBwDBkyBJ9//jl8fX1Rq1YtTJ06VX8uS5w/fx4vvvgilEol3Nzc0Lt3b5w5c0a/\n/dixY+jduzecnJzg7u6OkJAQPH36FABQUFCAGdOnw9vbG3K5HD0DA3H6+HG9S+Dg0aPgnJywe98+\ndOzWDTKlEkePHQMA/LljBzp07Qq5iwsaNm2KqKVLTX4HDEa1QciLJbjUFApanppq6lJLS2MutSoO\nswyVA4QQ5GnyrKrL63jM2D0DBKTQNgICDhxm7p6Jfg36WXSZ6XQ65GpyIVaLIRKJ4CR1AmfFW0l6\nejr27NmD6Ohoi64iNzc3k/XIyEh88sknWLlyJSQSCR4+fIjQ0FCEh4fjp59+wrVr1zBhwgTI5XJE\nRkbi8ePHeP311/HZZ5/h1VdfRXZ2No4cOQJCCLRaLYYMGYIJEybgl19+gVqtxt9//11ku/v27Qs3\nNzds27YNb731Fu03nseWLVv0wkylUqFjx46YOnUqfH19sXv3brzxxhsICAhAly5dSuwPnU6HoUOH\nonbt2jh16hQyMzNN4osElEolNmzYgDp16uDixYuYMGEClEol5s6di5EjR+LSpUvYs2cP9u/fDwBw\ndXUtdIzc3FyEhISge/fuOH36NJKTk/H2229j2rRpevEEAPHx8fD19UV8fDxu3bqFkSNHol27dpgw\nYYLFzzBmzBi0b98ea9euBcdxOHHihN6Cd+7cOfTt2xfjx4/Hl19+CQcHB8THx4PXagGex9x338W2\nmBj8+O238H/hBXz2xRcIeeUV3LpyBR4eHvpzvL9gAT7/5BM0bNAA7u7uOHL0KMa+9RZWrViBoMBA\n3L5zBxOnTAEALF6woMR+ZzCeG54HTp0CkpMBb2+ga9fKc9+au9SEWLrsbFOXmjBKTSZjLrUqAhND\n5UCeJg+KjxXlciwCggfZD+D6aeGHqiVy5uXA2aHkOJhbt26BEIJmzZpZddzRo0fjzTff1K/Pnz8f\n9erVw5o1a8BxHJo1a4ZHjx7hvffew6JFi/D48WNotVoMHToU/v7+AIDWrVsDoEIsMzMTgwYN0k+q\n2rx58yLPLRaLMWrUKGzevFkvhg4cOICMjAwMGzYMAFC3bl288847yMrKgouLC6ZPn469e/fit99+\ns0oM7d+/H9euXcPevXtRp04dAMBHH32EgQMHmtRbYPSAr1+/Pt599138+uuvmDt3LhwdHaFQKCCR\nSIp1i23evBkqlQo//fSTXoiuWbMGgwcPxqefforatWsDANzd3bFmzRqIxWI0a9YMYWFhOHDgQJFi\nKDExEXPmzEGzZs2g0+lQu3ZtuLi4AAA+++wzdOrUCV9//TU19ROC5o0bAzyP3KdPsfabb7Dh228x\nMDQUAPDdunWIa9IE369fjznvvKM/x5JFi9C/Xz/9etTSpXh/zhyMe+MNAHS+uA8jIzH3gw+YGGJU\nPLt2AYsWAY8fG8p8fYElS4Bnv+VKRZg3DWAutSoOk6w1BEIKW6KKo1OnTibrV69eRffu3U2sOYGB\ngcjJycGDBw/Qtm1b9O3bF61bt8Zrr72G7777Tu+S8fDwQHh4OEJCQjB48GB8+eWXePzsZpaYmAiF\nQqFfPvroIwDU6nHw4EE8evQIALBp0yaEhYXpLVg8z2Pp0qXo0aMHPD09oVAosHfvXiQmJlr1+a5e\nvYp69erphRAAdO/evVC9LVu2IDAwED4+PlAoFFiwYIHV5zA+V9u2bU0scoGBgdDpdLh+/bq+rGXL\nlhAbveH6+voiOTm5yONGRETg7bffRr9+/fDpp5/i7t27+m3nzp1D3z59DMnnCgroWywhuH3vHjQa\nDQIDA/X1pVIpunTqhKtG7QGATh07mqyfv3gRS6KjofDw0C8TJk/G48ePkZdnnXWUwSgTu3YBEyea\nCiEASEqi5bt22aZdAsW51O7dA+7eZS41O4ZZhsoBJ6kTcubllFwRwOF7hxG6ueQ3mF2jdyHYP7hQ\nuU6nQ1Z2FlyULno3mTU0btwYHMcVGSRtTmlHXYnFYsTFxeH48ePYt28fVq9ejfnz5+PUqVNo0KAB\n1q9fjxkzZmDPnj3YsmULFixYgLi4OHTq1MlkJJbgouncuTMCAgLw66+/YvLkydi+fbuJS2nZsmVY\ntWoVoqOj0aVLFyiVSsyaNQtqtbpU7S6OEydOYMyYMYiKikJISAhcXV3x66+/Yvny5eV2DmPMg9Q5\njoNOyJ5rgcjISIwePRqxsbHYtWsXIiMjsXnzZgx75RU4yuX0ZqvRPNcoMPPfQU5ODqIWLsTQIUMK\n1ZUL2X8ZjPKG56lFyNJLnTB56+LFQEiI/Yx4tORSU6upeOM4ajViLjW7gYmhcoDjOKtcVQAwIGAA\n/Fz88DDrocW4IQ4c/Fz8MCBgQJExQ7yUh7ODM0SluHA8PDwQEhKCr776CjNmzCj0kMvIyCgUN2RM\n8+bNsW3bNhBC9NahY8eOQalUws/Pj7ad4xAYGIjAwEAsWrQI/v7+2L59OyIiIgAA7du3R/v27TFv\n3jx0794dmzdvRrdu3dCoUSOL5xwzZgw2bdoEPz8/iEQihIWF6bcdO3YML7/8MkaOHKl3Dd24cQMt\nWrSwqj+aN2+O+/fv4/Hjx/D19QUAkyByADh+/Dj8/f0xf/58fZl50LeDgwN4IcNtMefasGEDcnNz\n9f1+7NgxiEQiNG3a1Kr2FkWTxo3RZOZMzJw2Da+NGoUNP/yAYaGhaNOqFQ4cOoSoyMhC+wQ0bAgH\nBwccO3FC79LUaDQ4/c8/mDVtWrHn69C+Pa7fvFnkd8ZgFILngfx8mv3ZfBHKLW03Lnv0qLBFyBhC\naJ1Tp4AePSrvs5UGwaUm5DWy5FITEj/K5cylVskwMVTJiEVifPnSlxj+23Bw4EwEEQf6w1/50soK\nyTf01VdfITAwEF26dMGSJUvQpk0baLVaxMXFYe3atbh69WqR+06ZMgUrV67E9OnTMW3aNFy/fh2L\nFy9GREQERCIRTp06hQMHDmDAgAHw9vbGqVOnkJKSgubNm+Pu3bv49ttv8fLLL6NOnTq4fv06bt68\nibFjxxbb3jFjxiAyMhLR0dEYPnw4ZDKZflvjxo2xdetWnDp1Cn5+fli5ciWePHlitRjq168fmjRp\ngnHjxmHZsmXIysoyET3CORITE/Hrr7+ic+fOiI2Nxfbt203q1K9fH3fv3sW5c+fg5+cHpVJp0k7h\ncyxevBjjxo1DZGQkUlJSMH36dLzxxhv6eKFSQQjy8/IwZ84cDB8yBA38/ZH44AHOnj2L4UOHAmIx\n5s2di9YdO2LK9On478SJcJBKEX/oEF4bNgyenp6YPHEi5sybBw93d7zwwgv4bPly5OXl4S2jODFL\nLPrgAwx69VW8UK8ehg8dChHH4fzFi7h0+TKWRkWV/rNUNrYMvrVn1OqihUhR5eZ1ihI0KlXlfY4t\nWwAvL6BRI/sWEoJLTbCm8jz9DtLSaHoLqZRaipRKWkcmo5myGRUG610bMLT5UGwdsdVinqGVL62s\nsDxDDRs2xL///ovo6Gi88847ePz4Mby8vNCmTZsSXT9169bFrl27MGfOHLRt2xYeHh5466239AHG\nLi4uOHz4MFauXImsrCz4+/tj+fLlGDhwIJ48eYJr167hxx9/RFpaGnx9fTF16lRMmjSp2HM2atQI\nXbp0wd9//10oc/SCBQtw+/ZtDB8+HE5OTpg4cSKGDBmCzMxMq/pCJBJh+/bteOutt9ClSxfUr18f\nq1atwksvvaSv8/LLL2P27NmYNm0aCgoKEBYWhoULFyLSyNoybNgwxMTE4MUXX0RGRgbWr1+P8PBw\nk3M5OTlh7969mDlzJjp37gwnJycMGzYMK1assKqtAPRB0EIeILFWi7TUVIx96y08SU6Gp6cnwsLC\nELloEQCgSZMm2Bcbiw8WLUKXwEA4Ojqia+fOeH3kSADAJ9HR0Ol0eGP8eGRnZ6NTx47Yu3NniYki\nQwYMwM7t27Hko4/w6eefQyqVolnTpni7BBFlF9hb8G1pIMQwt1ZRi5kYEeXmom1iIsTOzpYtMMb/\nr4z4FY6jVg8nJ8Nivl5U+YMHwKpVJZ9j61a6+PoCvXoBwcH2aykypjiXGsBGqVUCHCltZG0NICsr\nC66ursjMzNS7YARUKhXu3r2LBg0aPHeMRFkyUOt0Ov0IqtK4yaoj1b4vzASQfvZtjjMsz9AByMrL\ng4uTk12NilCpVLibmIgGLi6QV8KbrYbnsevffxHaoQOkxhYfIfjW/HYn9OG33z6/INJqrbOglLY8\nP58ulXGrFiY3LUqoFCVerNkml5fdWsPz1IqXlFR0P7i4AO3aAX//bWKNIhyHjIAAuLz0EsS9ewMd\nO1atuccIocJIraYiydylJmTFtqJvNRoNdu3ahdDQ0GqRSNcSxT2/i4NZhmyIWCRG7/q9bd0Mhj1R\nnAASiezb9G+vlBR8CwDvvUfFjGB9KY2AEcrKMXi/WORyq4QKL5fjRmYmmgQEUOtQcQJG+GuvIkEs\npha8iRPpNWD8XQrXxPLlVNDm5wOnTwOHDgGHDoG7ehXut24Ba9bQxcmJWosEy1FAgH1fV0L+IsH9\nXpRLzVgcMZdaqWE9xmDYA+ZTYQgjZJgAen5OnSo++Bagk3JOnlw+5+M466wm1lpZzP9vZYyTjudx\n499/0ahDB5OUDVWW0FBqwbPk6oyKMlj2HB2pyAkOBhYuhObRI1z4+We0T0yE6MgROtR9/366AEDd\nugZh1LMnYO9zChblUnvyhK4Lo9SEudSYS80qmBhiMGyFIICERRBAgghiPB8qFXD4MLB2rXX1AwKA\nevVKF8tiaf153EGM4gkNpcPnSxMEX7s2Hrz4Itp06AARxwFXr9LfxaFD1KX28CGweTNdOI662oKD\nqUDq0MGQVNFeMR+lplbTPEaZmfQ+YuxSqw6iuIJgYojBqEyYAKpYVCr4nDwJ8Y8/AnFxQI51+b8A\nAJ98UjWCbWs6YnHZvyeRCGjZki6TJ1OX2qlTVBgdPgxcuwacPUuXL7+kAiMw0GA5atDAvoVuSS41\n4R6TlkYFklzOXGrPYL1QRljcOcNqarAAIkDFB/7m5wN//QXExkKyfz+6PpscGADg4wMMHAjs2EFd\nYZbawnHU1dK1a8W2k2F/ODoCvXvTBaDutyNHqDA6fJiKhn376AJQy6FgNQoMBIrJzWYXmLvUhMDy\nlBT62ZhLTQ8TQ6VEiMDPy8uDo/ADYzDMqcECyJi8/HwAgLS8P3NuLnDgABAbS/8+Ow8HIM/TE7Ih\nQyAePJi6OUQiakkoLvg2Koq5EBhUFI8YQRedDrhyRR+IjdOngfv3gU2b6CISUZdar150adeuarjU\nACriRCKDSy0jg66bB2JbOUqtOsDEUCkRi8Vwc3PTzxnl5GTdrPHlhU6ng1qthkqlqp7DyUuB3fWF\nIHqMg6CBShE/OoD2hUhkF0PrCagQSk5JgZuDA8Tl0Qc5OTToNTaWWoKMk/nVqweEhUEbGoo4nkdo\nx46mQcPWBt8yGAIiEdCqFV2mTqUjBk+eNLjUbtwA/v2XLl98QRMkBgYaLEf169v6ExSPuUtNp6NZ\nsdPT6f8lEoM4EhI/2rvYew6YGCoDwgzlxU2iWVEQQpCfnw9HR8dKFWH2iF30hfFQeONRYGZ5gCq+\nGQT5ajUcHRzs43fxTAi6OTjAR5iwsixkZdHYn9hY4OBBerMW8PcHBg2iS+vWAMeB8Dx9OFmiLMG3\nDIaAkxPQpw9dADr9x5EjBnH09CmwZw9dAPr7FIRRjx6Aq6vt2m4NIpGpS02rpdeb8Sg1udwgjhwc\nqtW1Y3Mx9NVXX2HZsmVISkpC27ZtsXr1anTp0qXI+gUFBViyZAl+/vlnJCUlwdfXF4sWLcL48eP1\ndTIyMjB//nzExMQgPT0d/v7+WLlyJULL6e2P4zj4+vrC29sbGo2mXI5pLRqNBocPH0ZwcHC1TZpl\nLTbrCyEBmpBnRq2mb1EODjbL06LheRy+cgXBLVqYJhu0IVKRqGwWoYwMGqMRG0sfMsb5exo0MAig\nli1LLzifJ/iWwTCmTh1g5Ei66HTApUsGl9qZM3Sm+o0b6SIWA+3bGwKx27Wz/8BliYQuxqPU8vIM\no9RkMrrNyalauNRs+m1s2bIFERERWLduHbp27YqVK1ciJCQE169fh7e3t8V9RowYgSdPnuD7779H\no0aN8PjxY5OZvdVqNfr37w9vb29s3boVdevWxb1794qdhLSsiMXiSs/fIRaLodVqIZfLa7wYqrS+\nEN6QCgqoq0alojcGsZi+IZUiy2lFIeY42hcSid2IoVKRnm4QQEeO0NwpAo0aGQRQs2ZV+obLqKaI\nRECbNnSZPp3G4Zw4YRjCf+sWFUhnztDkkC4uNKdRUBAVSM8mTLZbinKpPX1K8zZJJKZWoyroUrOp\nGFqxYgUmTJiAN5/Na7Ru3TrExsbihx9+wPvvv1+o/p49e3Do0CHcuXMHHh4eAOhEmcb88MMPSE9P\nx/Hjx/UPSPM6DEaxCBd6QQG9qeXnU/Gj0xmsP8/j+mFQ0tOB3bupADp2zHR+rGbNgLAwujRtars2\nMhhlwdkZ6NePLgDNZSQIoyNHqPVz1y66ADS+yNilZgcvWMViyaWmVlP3MyGmLjVBRNn5S5rNxJBa\nrcY///yDefPm6ctEIhH69euHEydOWNxnx44d6NSpEz777DNs3LgRzs7OePnll/Hhhx/qR3bt2LED\n3bt3x9SpU/Hnn3/Cy8sLo0ePxnvvvVekFaegoAAFRrEIWVlZAKgbprLdYCUhtMfe2mULyq0vCKGW\niIICKnxycw3ix3geIGOLBM8/3znLGc2z9mjsrF2FSEmBaM8ecLt2gTt5EpxRe0mLFtCFhkIXGkqt\nQQKl+ExVph8qAdYXFLvoBx8fwyg1ngd36RK4w4fp8s8/4BISgIQE4KefQMRikPbtQYKD6dKmTbm5\n1CqsL4wtR4JLLTubWo6EbUJiUsFqVEEW3rI+D2wmhlJTU8HzPGrXrm1SXrt2bVy7ds3iPnfu3MHR\no0chl8uxfft2pKamYsqUKUhLS8P69ev1df766y+MGTMGu3btwq1btzBlyhRoNBosXrzY4nE//vhj\nREVFFSrft28fnJycnvOTVgxxcXG2boLdwPrCQNz587ZuQiFk6emoc/IkfI8fh+eVK+CM3NoZDRvi\nUY8eeNS9O3Lr1qWFWVlFB0FbiT32g61gfUGxu34IDAQCAyHJz0etixfhfe4cvM+dg+LRI3CCS23F\nCqidnZHapg2S27VDcrt2yDd7ZpYFu+uLciQvL69M+9ls1vpHjx6hbt26OH78OLp3764vnzt3Lg4d\nOoRTp04V2mfAgAE4cuQIkpKS4PosMj8mJgbDhw9Hbm4uHB0d0aRJE/3M8oIlaMWKFVi2bBkeFzE/\nkSXLUL169ZCamlqqWW8rA41Gg7i4OPTv37/GxwyVqi+ETKyC60ulMsSlCBMd2ntAYzFoeB5x58+j\nf9u29hEzlJQE0e7d4GJjwZ0+Dc7oNqNr2xYkNBS6gQPLffix3fWDDamyfcHz9NrUaukijNAUpp2Q\nyagLRiSi13FuLr2ujS25Mpne8lDl+uH+fXBHjkB0+DC4o0fBPfNUCJAGDaALDgYJCgLp0aNULnu7\n6AvBpVZQQN2BwktQOZGVlQVPT8+qM2u9p6cnxGIxngjD9p7x5MkT/dB1c3x9fVG3bl29EAKA5s2b\ngxCCBw8eoHHjxvD19YVUKjVxiTVv3hxJSUlQq9VwsDDaRyaTQSYEhhkhlUrtVnDYc9sqG4t9odMZ\nLjhh1FdBAb2xCjdUpbLaBeNKxWLb3eQePqQxEDt30rdaYzp00McAierVAwBUZCtt2g92ht32heCe\nFsSPkJ9LIqHXqJD8z8GBrgujm8yvWeNrPSeHurpzcmi5UayK3faDOfXr0+WNN2ifnD9vGL7/zz/g\n7t6F+O5d4McfaX907GiIN2rTxqrYHJv2hVhsyHQtEpV7oHVZn4s2E0MODg7o2LEjDhw4gCFDhgCg\nSfQOHDiAadOmWdwnMDAQv//+O3JycqB4poZv3LgBkUgEPz8/fZ3NmzdDp9PpE/HduHEDvr6+FoUQ\no5pgHveTk0NvkFqtYdi7i0uNyv5cKdy/TwOgd+6k8zkZ07kzFUChoeX+9seoYliy9gAGkePqSq09\ngvVHIrE+4FYkovvK5fQ4wuhPlYreB4TpWTIyaMxKVcqPIxbTF4kOHYDZs6kL+cQJwxD+hASaN+vU\nKWDZMppZumdPQ1Zsdt1ZjU39AhERERg3bhw6deqELl26YOXKlcjNzdWPLps3bx4ePnyIn376CQAw\nevRofPjhh3jzzTcRFRWF1NRUzJkzB+PHj9cHUE+ePBlr1qzBzJkzMX36dNy8eRMfffQRZsyYYbPP\nyagghNFH6en0xldQQG+4QsCes3PVuelVJe7dMwgg49gDjqNJDMPC6Hxgvr62ayPDNhBiEDyCtQeg\n16Ew/NrY2iMIn/K00Brnx/HwoFbhmzfp/wWBxPP03MLo0KpiIXZxoYlDQ0Lo+r17hnnUjh6lgm/n\nTroAQECAIbdRjx60/xkWsakYGjlyJFJSUrBo0SIkJSWhXbt22LNnjz6o+vHjx0hMTNTXVygUiIuL\nw/Tp09GpUyfUqlULI0aMwNKlS/V16tWrh71792L27Nlo06YN6tati5kzZ+K9996r9M/HKGfMh7wL\nM5InJxtyW7Ah7xXDnTsGAXTpkqFcJAK6dTMIoHII7mRUEXQ6g7VHo6HrQmyPWEwf3I6OBreXUF6Z\ncJwhEaq3Nz2/8T1EcKEDBmFUlcIP/P2pO+2NN+j3cO6cYQj/v/8Ct2/T5YcfAKkU4o4d0TggAJxY\nTBM/Mku5HptHjE6bNq1It9iGDRsKlTVr1qzE0UPdu3fHyZMny6N5DFsiDNE0d30J8+YIN1Y3N2YB\nqghu3TK8ZV69aigXsjiHhQEvvQR4edmujYyKx9jaY+zmEosN1hVXV8MgBEH42KO1xTg/jpsb/Swq\nlcFipFLRIeHGgdhVRTBIJECnTnSJiKCZoo8fN7jUEhMhOnkSLU6epBPNursbkj4GBdV4l5rNxRCD\nYYIQ9yPcnATXl3BzUioNN6canj+lQrh+3WABun7dUC4W01iEQYOoib5WLdu1kVFxGFt7tFq6Dhhc\nT0JQs7GLqwqPwtR/JoWC/qaNB13k5tIYHZ2uarrUXF2ptXbgQLqekAD+4EEk79gBn8uXwT19CuzY\nQRcAaNzYEIjdvTuNr6pBVOFfMaNawPMGs3V2tmGqC5GI3ngcHakAYlQMhFCrT2wsXW7eNGyTSukb\n46BBQP/+NOaCUX0Q3FtarWEkl/EQdhcXQ4I8QfhUFStJWTBOHOjiYnDLG1uN8vIMrjcHh6olBOvX\nh+6NN/B3y5YIbd0a0osXDVajc+fotX/zJvD99/SzdepkCMRu2bJ6f/dgYohR2RgPgxV89kKOJ+Ht\ny9m56rx9VUUIAS5fptaf2FgaDyTg4EDfDgUBVAFz+jEqGcHdbBzbA5gGGguzkBsLn5qOsUvN3d3U\nap2dTe9dWm3VdKlJpXS0Z+fOwLvv0sDrY8cM4ujBA+piO34c+Phj+iIUHGxYquHgCPaLZ1Qs5kPe\ns7PpjZnnDUPeXV2rzk2kqkIIcOGCwQKUkGDYJpMBvXtTAdSvn/3Pi8QoGuMh7MJLRmamYdi6MJGm\ncWwPu/asQ+gvY5eaYC3Ky6MuNSGPmSAsq8pLnZubYS5AQoC7dw2B2MeO0RG7f/xBF4DOFyi41Lp1\nM8xRVoVhYohR/hjn+cjONsT9iESGEV8s4LniIYTm/hEE0P37hm1yOdCnD7359evHRuFVNUpKWOjo\nSEXtnTs0gZ8ggKrKw9neMXapubpadvfn5JjWqyr3PI4DGjakS3g4/X39+68h8eO5czSe8Pp14Lvv\nqPDr0sUwhL9Fi5IFNs/T3EhPnwKtW1N3vI37h4khxvMjTHUhpMYXZnkHDLMXs7ifykGnozcuQQA9\nemTY5ugI9O1LBVDfvtQ9wrB/ypqwUJhuRtjGqDjEYsNEpO7uhlAA4YUwN9c0AazRdCF2j1RK84d1\n7QrMnUutRMeOUWF08CC9xxw9SpfoaMDT09SlZp5uY9cukEWLwBlPj+XnB3z5JTB0aKV+NGOYGGKU\nHkLoha5Wm8b9GI+6cHKqOhd7VUenA3fqFFr9+CMkZ84ASUmGbU5ONPYnLIxagqqBObvaYg8JCxnl\ngxBgrVRScWCe2ygjg37fQr2qNDuChwcweDBdCAFu34bu0CHg8CFwx0+AS00FYmLoAkDbtAnUPbsh\nP56/UbUAACAASURBVLAryNN01Hp3IWA+I+rDh8Dw4cDWrTYTREwMMazD+E1HGPJuHDzIprqoXAQz\nc2wssHs3JE+eIEDYplAAAwZQAdSrFxNA9khxCQslEvtIWMgoHzjO8nQhgktNEEmCS83G04UQQqAj\nOuigo3+JDjqjMl7Hgyc6aHQaaHU8tN5SkNf6Qjf8RegKCiA7dxHOx89AcfwM5FduQHKdLk7f/6TX\nQIXkuzCScdYs4JVXbPL5mRhiWMb4ghWGlRoPeXdyYiNOKhutls5L9EwAITVVv4m4uOB+x46o85//\nQNK7N0u7by9Up4SFjPLBeBSf8Sg1YYCJMF2IRGIQR8/xezAWN2qeuk7zNHngeOjFjpbw0Oq0VNwQ\nLQjoPvyz7YQQUAlDAA7gwEEEDmJODBHHgeNEkHJSiBwdIOrRE5rAYDwFIEp/CocTpyE7dhLyA4cg\nfppRXENpXOORI3RARyXDnmYMivlUF/n5bMi7PaDR0OGtggBKTzdsc3OjCRDDwqDt0QNnL12Cb4cO\nzIJgKwRrjxDjU90TFjKeH+OcRZZcavn51KUG6OsRiaSQ5YYnxlacwuJGKNfw9DeZmPPw2UTmBnEj\n5kQQQWQibmQiKni4Mt73dR7uUIUNgCpsANT/2w33dxaUvJNxLFElwq7EmkpRU10YD3l3c2Pixxao\n1TRAcedOYM8ew80QoG+SAwdSF1hgoCEwlmXjrlxKSlioVNashIWMMqO33AjCRkKgE0ugc1RCp5FB\np8qHNj8Xmqw0aLPywGvU0HEEOgcJdFIpdBz0lhsCHbXacFTUCOJGxIkg4SQQIpPcHFwgFlfu75H3\ntnLaHhvlMGJiqCZR1FQXbMi77SkooObhnTuBfftobhiBWrUMAqh7dzYyqDIRhrCzhIUMKzEWNzzh\nTYSO3nKj00LDa6DhNeAJX0gQkWf/uGfRNSK5CCK5G0QaBURaLUQFakjzVBCpNBDpAM5BCkhLzm3E\nQ1dZ3VAIdaf24H28IXqSDM48gBqg7fbzo8PsbQC7aqszxrkvjON+ADbk3R5Qqejw1P/9D4iLo/EC\nAl5eQGgoFUBdu7IHbGVgPIRdo6FCSCQyTbbHEhbWOAShUpSw4XW8XtxoddpC4oYnvImwAfDMcmNY\nxCIxjbl5tl6kW8o4FFAIbVCrgdwcQPXMyg8YXG/29HIrFiNz/hy4z5gDwsFUEAmfd+VKm7WZ3WGr\nE8KQd2GiQTbk3f7Iz6e5OXbupAIoN9ewzcfHIIA6d7avG1l1w1j0WEpY6OFhsPYIViB23VQLCCHF\nChtB3AiLJXFjjrGo4cBZL26eB+PpQlxd6W/ZeKojVT6g0ZoG69sYVUgfPF21DK7RyyBOSjZs8POj\nQojlGWKUGfPkXsIcRGzIu/2Qlwf89RcVQAcO0HUBX18qfgYNAjp2ZN9VRSK8KGi1hkk2i0pYyKgy\nWBI1grDRER0K1HQgyKOsRyAiohc3xoLIHEHYiDhR5Ymb50X4DQuj1NRquuTlGeJCtc+EnEYDiJ5v\nlFpZUYX0gapfL+gOHYQ8Kw+enXuxDNSMMqDV0r9Pn1IBpFIZMs3KZGzIe0Uj5PdJTga8vakLy9JF\nnJsL7N9PBdBff9HvScDPzzAPUPv2TABVFMaWUp6n14dSaTqqq5QPA0JMgx1Ioexx5VPHfHtZ6mg1\n9F6Rp86DhEjsor3m9XRmMSzmdYTYmaLqCJYbcyFkcg4tXc/T5kEqlZqIG8GSY5fi5nkwngZEqTTM\nEpCXByTl0GeGKt/gBq5sl5pYjPxObaFzVAItulfeeYuBPTXtHfMh7zk5tDwpyRC4yeaVqhx27QIW\nLTId+unrCyxZQt1b2dkGAXTwoKkAeuEFav0JCwPatmUul4pCeJBmZOiT3elcXaB1lEErk0IjAjS8\nBqr8bOjyzR6aOrMHcxEP4pKbYB+CSRABiZmJEEmKFtzm8Szm69bWKem4ACyKjpLqWDqPUEew3EhE\nEr0lR8SZflb+mTVE4aCAWFJDrX5i8bMXgGeuMj8/QMcbBtPk5xumC6mh8XBMDNkbJQ15F9S7u7vN\nzYo1il27gIkTDQ9bgaQkYMIEoE0b4No1Q4A6QCfIHDSILq1aMQFUUTx7YdDl50Gtpf2fpZCCOMmR\nLyFQcypo+Rxoc7T6B7REJAHHcWV6WBfabv7wtuK4xT3gi6pTWiEhiAA3R7eaKwIYlpFKAYmcutQ8\nPAyB2Pn51HokDOYQ0qzUgBGsTAzZA6UZ8s7yyVQ+PE8tQpasAkLZhQv0b0CAwQLUogUTQBUAr+Oh\n5dXQqvKgzc+FWqdFvlgHjaMMBU70OnkoU0Mi0kECCcQQw1Hq+FzJ4xiMaovxdCEuLqYTb+flGf7q\nE0RKAVH1E9dMDNkCNuTd9hBC+/3pU+pSKWp5+hRISLAuK+ry5cDIkUwAlRP8s+y5mmejetQaFVR5\nWdDk50LD6cBLJYBSAU7uCIncCRKpDI46DsBDuDu6M2sIg1EWBJeao6NpILbwsp6bZ/BUCPFG1eCe\nx8RQZVNQQGfoVanYkPfygBB6gWZnG8RLUaLGvEyYbqS8kMvZd1gGeB1PJ318NoVAAa9GPq+iQ5s1\nBeALVCAaDUQiMaSOThB714aTswISR+dCcQ2Ca4jBYJQTQs4ihYK61IQwDsFqlJ1N78PCs6yKDuCp\nmq2uyvA89cu6uta4ALVi0ekMgqY4EWO0LsnIwOCnTyF6HtehREKnHSlqcXenI8e+/LLkY3l7l70d\nNQB97hZCxU+BVg2VrkBfptXx4ACIdAQStQZiLYGzgwxi51qGhIcyGbtuGAxbIRIZXGqurjToWrAa\n5eYCBSogR2uY0LsKudSYGLIV1dWCwPN0KomSXE/mQicz0zDVgZVwzxYA9MJzdy9Z2Bj/dXOzbvJZ\nngd++40GS1uKG+I4Oqqsa9dStb86IuRv0eg0+kkiBdEjlOlAAEKezZckhkQkgUwnglgLmiROIgGc\nFaYCqLpeLwxGVUZISOrkRO+rxvGvubnUpabTARKxVdOF2BImhioTnqfTL1y8SEcadetmvyPCNBqD\nqCkursZ8m/GcWmXB0dGygLGwrnFxwV/376NPUBCk1oiasiIW0+HzEyfScxgLIuGcUVH2+11WAIQQ\naInWZGZslbYA+bwK/DMrjw4EhOj0gkfCSSCXyCAW3hSFG6c2D5BK6HfvqTDkR7HTmyaDwbCAPsDa\ngca81qplGKUmJH4UpguRSkv98lvRMDFUWcTEADNnAg8eGMqMc9RUFAUF1okY83Uhn1FZUSiKt9BY\nsuII2YCtheehys+nD9GKfnCGhgLffms5z1BUVMV+hzbEWPQIgcwqvgAqvuCZBUgLHSHgOEAMESQi\nCaScFI5SeaF8L/pJTwueBWAK2XKdnQ0CiMFgVA/MpwvRak1z5mkAmN8jbAgTQ5VBTAwwfLjlHDUT\nJ9KHbHEPU+ORT+npqHXxIrgnT4CsrMKCxlzUCEq8rLi6lux2Ml93da2eeSlCQ4GQEOsyUFcxBNGj\nMZqTKZ9XoYBX62N6CAHAEYghgrQ40WN6YMNoFGHAgFJpEEB2MF8Sg8GoBASXmjBdSI4zzXVkJzAx\nVNHwPLUIFZej5t13gZv/z96dx0dVnv3j/8ycmTmzZWOyEiLBioArQiQCxWplUZ9qrY/FFtv6Ratt\nLVaNaEHZca8iPlXL14VarbbUp1999Ck/JMYCIlQqm0vLJiJbEpiZzD5z9t8fh3OSkIQkw5zZcr1f\nr7ySnJw59z2HkLnmvq/7uvd2Dm5ODmpOrHyyAvhmf/tgNncOajoGMafKsykqyosX+pRiGGDChEz3\nImmyIndIWBbBSwISshr0qEvZJciKArPJBOZETo/NbIPzRHXfPtG2weB59WttjzwtAMrHQJkQ0nfa\ndiGW7HkzRMGQ0T78sPPUWHeCQeCJJ3q/lsUCpbgYEbsdrooKmLtLCO4uuCkooBU4A4wW9AiyqI74\nSKIe9Gh5PjABUACLmYHFxIBlbHCZLMkVJpTl9hEgRVH/0JWUqImVLJuzy20JIQMD/YUyWl+K9QHA\n+PHqnlWnmopyuSDKMj7Ytg1XjxkDM43aDHiyIkOQBSQEtWinL94GARx4WdCDHgVq3GM1W8CYGNgZ\nFhZLkkFPp8bl9hEgQA16PJ72pbf0+0kIyREUDBmtqqpv5zU05PT0CzGWVo1ZPFGgUJBFxMUEBEUN\nenhR3aH8OOcDy6hBj4Oxg7GkeAsKWQISJ7aL0Ya6y8ral8BTAEQIyUEUDBlt0iR1h+AjR6hGDelV\nly0oZAEJkYOgqAGQJKsFJk0mk75k3cHY4TCZAIRRbC0Aw6R4SlTbPobn1WDHbldHKh0OKoJICMkL\nFAwZjWHU6sU33EA1aojulFtQKBIkWYICtTCh1WQBY2bgZOywWLv/LyspKa7ZoS2DFQQ134dl1VL8\nLEvbjhBC8g4FQ+lw/fXAf/9393WG8rhGDenHFhQnVm4xZgYusw2MNQPBsSAAPKdWgbZaALsDKC2l\nIoiEkLxHwVC6XH898N3vAo2NuVGBmvRZ0ltQZCro6UhbASaK6pJ3hwMoK2ivAUQBECFkAKBgKJ0Y\nBrj0UqCmRs25oBeanCTJEmJiXB3pOTG91ectKDKtYxFESVIDHq0KtN1ORRAJIQMSBUOZoiWjMgwF\nRTnGm/DDy7UBUHrfgiIbaAEQx6nL4VlWLYLodKoBEBVBJIQMcBQMpRvDqO/CtQRVSV0dBEVpD45O\n/iBZIyrE4OcCcDEO2JgsDiK0IognKpfDZlNrVjkcagBERRAJIURHfxHTjWWBoUPVIEj7EEX1s7aL\nN8+rXycS7cESoC5h1kaReJ6WNaeZrMjwc20AkL2BEJdorwFks6lFELUl8BQAEUJIt+ivYyaYTO2b\n1nVHUToHSdrXPN++8WrHzS8VRb2mNpJkNqvX1r4mKRHiwwgJURRZ3ZnuSjtZAjgeiCfaj1ERREII\n6RcKhrLRqYIlQQA+/VQdXTKbOwdN2rRIxyk4SWofTWIY9Zpmc/vXlK/UJ7zEw8e1gTVbM58XpBVB\nFAT131KrAt0SAYbUALYsHbUihJAsRcFQrrJae058leWuI0uC0HkVkTYFp6hLvvUA6eQPCpYAAG1c\nEHExgUFscWY6oP2bdSyCWFLSPgIkKwC+opFAQghJAgVD+chsVj96Cpa6y1fSRpO0ESWt9ow2BadN\nw2kjS9rnARAsxcQ42vgg3BZXehsWxRM5QKJ6v+329o1QTy6CKEs9X4cQQsgpUTA0EPW2Su3kQOnk\n5G5tmmYArISTFRm+hB+yIqcnaVq7z+KJKtAOB1DqpirQhBBiIAqGSFdaINNdAT4tuTuZlXAn5yvl\nwJROWIggyEeMS5pWlPYpTK0KtFYEUQuACCGEGIqCIdI/p7MSTguUtFVx3a2E6/iR4WBJkAV4E36w\nZmtqK0h3rAIty2oA5Ha3B0BUBZqQHkmyhI+PfIxj0WMod5Wjvro+eyq8k5xFwRBJrd6CJS25++SA\nSRtV0nKXRFE991Qr4QwW4EKIiwmU2IpO/2KK0v4cFUUNeAoL2wMgqgJNSK9W712NBX9fgOZIs36s\nyl2FJZcvwdXDacNrkjwKhkh69Zbc3Z+VcNo0XCCgBhcpXAkXF+Pwc21wWZwwJXsdrQq0FgBpK8Cc\nTiqCSEg/rd67Gre/ezsUKJ2Ot0RacPu7t+OFa16ggIgkLeNJG8899xxqa2tht9tRX1+PLVu2nPJ8\njuPw4IMPYujQoWBZFrW1tVi5cmW35/75z3+GyWTCddddZ0TXiRG0QMnhUKeOioqA0lJg8GCgtlb9\nGDZM/RgyRH1MWZl6rlZ3KR5XA6S2NvUjEAAiEfW4lvitKD12QVEU+BJtkBQZLNPPKStZVtsJBoFw\nWD3m8ah9ralR++pyUSBESD9IsoQFf1/QJRACoB9buG4hJFpVSZKU0b/Iq1atQkNDA1asWIH6+nos\nX74c06ZNw+7du1FeXt7tY6ZPn47W1la8/PLLOOuss9Dc3AxZlrucd+DAAcyePRuTJk0y+mmQdOq4\nSk0LKDye9pGm7vKVOo4sdSxIqeUrnVRjKSzFEOTDKOxr0rQsAQmufRsMrQgiVYEmJClhLozmSDOO\nho+iOdyMLUe2dJoaO5kCBUfDR3HL/9yCEaUjUMQWodhejGJ7MQqsBWiONaM8VA6P2wOX1ZX8aC/J\nWxkNhpYtW4bbbrsNM2fOBACsWLECf/vb37By5UrMmTOny/lr1qzB+vXrsX//fgwaNAgAUFtb2+U8\nSZJw0003YfHixfjwww8RCAQMfR4ki5xqSX/HlXA9lA0QuTiOhw7DJolgtP8dWrDUMWjqmAPEMGrg\nU1zcvg9YDqyUIyQTwlxYDXI6BDv61yc+R/hIUtd+/6v38f5X73f/wz3qJ4vZogdLRfYTQRNbrAdP\n2rGTf1ZkL4KtvyPFJGdkLBjieR5bt27F3Llz9WNmsxmTJ0/G5s2bu33MO++8g7q6OjzxxBN47bXX\n4HK5cO2112Lp0qVwOBz6eUuWLEF5eTluvfVWfPjhh732heM4cNru3gBCoRAAQBAECIKQ7FM0hNaf\nbOtXJiR9L8zmHssG+MLHEGVLUGwpgKTIgHgiWBIEQBTUAohaYrfNpo4A2Vg1GNLebcpK2osgSqLU\n6fNARfehXbrvhaIoCPPqiI4e4ESOoiXSogc5LZEWRIS+BTqFbCGq3FUY7B4Mk8mEDw580Otjpo+a\njgK2AIFEAEEuqH5OBOENexGVo+BlHqIswhf3wRf39fs5Oq1OFLMnAiUtSGKLUGQvag+wOoxKaV8X\n2AqyYjQqm/5/SKIECVLKX8uSvV7GgiGv1wtJklBRUdHpeEVFBXbt2tXtY/bv34+NGzfCbrfjrbfe\ngtfrxR133AGfz4ff//73AICNGzfi5Zdfxo4dO/rcl0cffRSLFy/ucnzt2rVwOp39eFbp09jYmOku\nZI3M3otjGWy7q52bdma6C1mB7kO7VNwLRVEQlaLwCT74BB+8ghc+Xv3c8euEnOj9YgDcjBseqwce\nqweltlL1s7VU/9pj9cDBtL/BlRQJO6074RN6DmBKraW40XYjGDCAHepHh4WgiqKAV3iExTAiUkT9\nECPtX3f4PiyFERWjCEvquTEpBgUKYkIMMSGGo5Gj/bp/ZpjhYlwosBSon5mCLt+7LW64mQ4fJ763\nmVM/GpVN/z8+xacpvV4sFkvqcTmVxSnLMkwmE15//XUUFam/5cuWLcMNN9yA559/HqIo4sc//jFe\nfPFFlJaW9vm6c+fORUNDg/59KBRCTU0Npk6disLCwpQ/j9MhCAIaGxsxZcoUWAf4cuxU3gtFUdAS\naUEwEUSxI0P7j50GSZSwc9NOXDjhQjCWgZujRPehXV/vhaIoCPEhtERa9Kkq/SPc/nVUiPap3SK2\nSB3RKRiMSnclBrsHo8pdpX5dMBiVrkq4bP3f2uaR6kfw89U/V/vcIZHaBHXE5eEpD+Pisy7u8jjt\nPoyeODrp3wlJlhDmw51HnHr4fPKxhJiADBlhKYywFO5323aLvdNoVMfpu07HTnzWRqMK2cIum0pn\ny/8PSZaw4esNaOPacG7ZufhmzTdTVitKm9npr4wFQ6WlpWAYBq2trZ2Ot7a2orKystvHVFVVobq6\nWg+EAGDUqFFQFAWHDx9GNBrFgQMHcM011+g/15KrLRYLdu/ejW984xtdrsuyLNhuKv1ardasDTiy\nuW/plop7EeJCCIthFLuKc7qAG2NhBnwQANB90CiKgrAYxrHwsU45OkcjnXN1YkLf3k0X24tR5a5C\nVYEa7GhBT1VBlf6102rMaPp3Rn4HLzAvdK0zVFCFxZct7nVZ/en8TjBg4LF54HF7+v3YuBBHkAsi\nmGgPkNoSbfr32lTeyT8LckHIioyEmECL2IKWaEu/2jXBpE/hadN2hbZCCH4BZ205CyXOEpTYS9pz\npDpM7zmsjt4bSFJ3taKGFA7BM1c+g+tHXX/a10/2tSBjwZDNZsPYsWPR1NSkL32XZRlNTU2YNWtW\nt4+ZOHEi3nzzTUQiEbjd6kqfPXv2wGw2Y8iQITCZTPjss886PWbevHkIh8N45plnUFNTY+yTIjlJ\nlEX4Yj5YmRRXmibEQIqiIMgFe0xCbg4340jwCBI7+zZ1VWwv1gOcjsFOx6+NCnT66urhV2PaN6bl\nVAVqh9UBh9WBSnf3b/J7Iisywly404hTp5GneKDHn8UEdVovwAUQ4AL4Ovh154v3ki7FMmznZPKO\neVD2IjWIOumYdt6p/i16qhV1JHQEN/zlBvz39P9OSUCUjIxOkzU0NODmm29GXV0dxo0bh+XLlyMa\njeqry+bOnYsjR47g1VdfBQDMmDEDS5cuxcyZM7F48WJ4vV7cd999uOWWW/QE6vPOO69TG8XFxd0e\nJ0QTiAcQ5aMocZRkuiuEAFADnUAi0CnAaQ53/Touxvt0vRJ7SafRmy7BjnuwoaMBqcSYGUyomZDp\nbhjObDKr0172IpxRdEa/HstLfKeRpwCnfm6LtWHX7l1wVDoQ4kKdfqadLykSOIlDa7QVrdHW3hs7\nSSFb2G2gVGgrxGufvtZjrSgTTLh7zd347ojvZiS4zWgwdOONN+L48eNYsGABWlpaMHr0aKxZs0ZP\nqm5ubsbBgwf1891uNxobG3HnnXeirq4OHo8H06dPx0MPPZSpp0ByXEJMwB/3w2k7jUrThPSDFuic\nPFV1crDTn0Dn5KmqqoIqVDoq4d/lxxWXXQG3w6CNhklWsjE2lLnKUOYq63RcEiVsC23DmEvHdDtl\nqCgKInyky4hTpym97qb5uKBeDiHEhRDiQjgUOtSvPitQcCh0CB8e/BCX1V6W9HNPVsYTqGfNmtXj\ntNgrr7zS5djIkSP7tXqou2sQAqj/8f0xPwRZgJulF4uBwOhNPhVFQVuirfsaOh2CnYTYt6mrQY5B\n3eblaCM6Ve6qHkd0JFHCtq+25cyID8k8k8mEArYABWwBhhQO6ddjBUlAiAt1GygFEgFsPboV675e\n1+t1msM9F9c0UsaDIUIyJcJHEOACKGALMt0Vkganu8mnFuj0WDDwxNf9CXS6y8vRPle6KymQITnD\nyljhcXrgcXafZL7p0KY+BUNVBVUp7lnfUDBEBiRJluCL+cCYGFjM9N8g3/W2yef//c7/xfia8Tga\nPtpjsNMSbkFC6lug43F4us3L0UZzqgqqYLfYjXiqhGSl+up6VLmr0BJp6TZvyAQThhQOwaQzMrOF\nFr0KkAEpkAggIkRQYqek6XzXl00+b//f2/t8PY/D056E7O4mV8ddSYEOISdhzAyWXL4Et797O0ww\ndVsravmVyzO2MpCCITLgcCIHf9wPh8VBSdN5LMpHsb1lO97e9fYpN/nsqNRZ2iUvp+P0VYW7ggId\nQpJ09fCr8cI1XWtFDSkcguVXLs/YsnqAgiEywCiKAn/cD17iaSl9HlEUBfsD+/HPw//E2kNrceiN\nQ9jl2wVZkft8jeXTluP7537fwF4SQrRaUesPrEdbog3nV5yPSWdMynitKAqGyIASFaJoi7dR0nSO\nC3NhbG/Zjm3N27C1eSu2NW9DIBHoct7ggsEYWjQUmw93v/lzR9WF1UZ0lRByEsbMoH5IPVgL2+8a\nSkahYIgMGJIswRv1wmw2U9J0DpEVGfvb9mPr0a164LPLu6tLDhDLsDi//HxUi9W46uKrUFddh6qC\nKkiyhPqX6k+ZuFlVUIX66vp0PSVCSJahVwQyYIS4ECJCBMX23NuIdSAJcSHsaNmhBz/bm7cjwHUd\n9RlSOARjq8ZibNVYjKkag3PLzwWjMNi2YRvGnNVeVK4viZuLL1uc8WF6QkjmUDBEBgRO5OCNeeGw\nOLrs5EwyR1Zk7PPvw9ajW/Uprz2+PV1GcOyMHRdUXtAp+KlwV3S5niRK3bbTU+JmXzf5JITkNwqG\nSN7TiuVxEodBjkGZ7s6AFkwEsb1lux78bG/ZjiAX7HLeGUVn6EHP2KqxOKfsHFiZ5Haj1uTiJp+E\nkPSgYIjkPT1p2kZJ0+kkKzL2+PaoIz4nprz2+vd2Oc9usWN0xWiMHayO+lxUdRHKXeWG9GmgbPJJ\nCOkfCoZIXpMVGb6YDyaT6bRHFsipBRIBPfDZ1rIN25u3I8yHu5xXW1SrjvicCH5Glo6kfxtCSEZR\nMETyWogLIcyHKWk6xSRZwh7fHmxtbl/htc+/r8t5DosDoyvbR33GVI1BqbM0Az0mhJCeUTBE8hYv\n8fBGKWk6FfxxP7Y1b9OTnHe07ECEj3Q5b1jxsC6jPlTGgBCS7eivFMlbbfE2JKQEJU33kyRL2OXb\n1amuz/62/V3Oc1ld+qiPluhM95oQkosoGCJ5KcpH4Y/74ba5M92VrOeL+bCtpT3JeUfLDsSEWJfz\nziw5U13afiL4GekZSSuxCCF5gYIhkndkRYY/7gcA2BhbhnuTXURZxC7vLnxy9BN91OdA4ECX89w2\nNy6qvEgf8bmo6iIa9SGE5C0KhkjeCXEhhLgQiuxFme5Kxnlj3k5L23e07EBcjHc576xBZ3UqaHi2\n52wa9SGEDBgUDJG8IkgCfDEfWAs74JKmRUXEp8c+xY7WHXqi89fBr7ucV2ArwJiqMZ1GfWi1HSFk\nIKNgiOSVtkQb4mJ8QEzpHI8eV5e2H92KT45+gh3NO8Dv5Lucd7bn7E7VnId7hg+4QJEQQk6FgiGS\nN2JCDP5YfiZNC5KAL45/0WnK61DoUJfzCtlCjKlsX9o+unI0TRcSQkgvKBgieUGrNC1Dzouk6dZI\nqz7qs61lGz5t+RQJKdHpHBNMGOEZgbGDx2J0+WjYj9hxzZRrYLVSNWdCCOkPCoZIXghzYQS5IIrY\n3BsF4SUeXxz7Qq/mvPXoVhwJH+lyXjFbrOb6DB6jj/oUsoUA1N3at/m20fQXIYQkgYIhkvMESYA3\n5gXLsIavgJJk6bR3PW8ON+vL2rc2b8VnrZ+Bk7hO55hNZozwjOhUzfnMkjMp2CGEEANQMERylucM\nXgAAIABJREFUXpALIi7GUWIvMbSd1XtXY8HfF6A50qwfq3JXYcnlS3D18Ku7fQwncvj82Oed9vA6\nGj7a5bwSe4ke+IypGoOLKi/Ky9wnQk6XoigQZRGiLMLKWGm7F5IS9FtEcl5bvA0u1gWTyWRYG6v3\nrsbt794OBUqn4y2RFtz+7u144ZoXcPXwq3EkfETN8zkx6vP5sc/BS51XeJlNZowsHalXcx5bNRbD\niocZ2n9CcpUoixAkAYIsQJIlAIDVbAVjZhAX4hBlUT3GWGE1W2FlrDSCSvqNgiGSsxRFDUwkRQJr\nYQ1rR5IlLPj7gi6BEAD92J3/352Y98E8tEZbu5wzyDGo09L20ZWj4bK5DOsvIblKVmQ98BEkAQoU\nWEwWWBkrCtlCOCwO2BibPiIkSAJ4iQcv8YgKUfAij7gQhwwZjImBjbHBJNObDNI7CoZIzooI6q7p\nBbYCQ9v5+MjHnabGupMQE0iICTAmBqPKRnWq5lxbXEujPoScRFEUCLIAURbBSzwURYEJJtgYG+wW\nOwbZB4G1sHrw091oD2th9TdCHnj0USRe4pEQE4gKUSREdRVmIB6AzaZey8bYaPSIdELBEMlJoizC\nG/UCgOFJ08eix/p03t31d+OX434Jp9VpaH8IyUUdp7tEWYTZZIbFZIGNsaHQWQiWYTuN+iTDYrbA\nYrbAYXWgCEVQFAUxLoa92IuKggpwMgdO5BASQlCgwGRSgy+rWW2T3rQMXBQMkZwUiAf0d3xGK3eV\n9+m8iWdMpECIEKjTXbzE6wEQADAmBlbGiiK2CA6rA1azOkJjZBCiBTuAukjBarVCkiV9ao2TOET5\nKDiRQ0SOQIGi5x1peUlkYKBgiOScuBCHL+6Dw+pIS3v11fWocFV0mw8EqMUPqwqqUF9dn5b+EJJN\ntOkubdRHVtR8HavZCofFAY/DAxtjO+V0VzoxZgYOs0P/+6E41f7zEg9BEtTgSOIQ4SOQFAlmk1kP\n2qxmK40e5SkKhkhOURQF/rgfkiylbRSGMTM4s+TMboMhE9Q/jIsvW0zvIsmA0DEvR1IkPc/Harai\n2F4M1sLqoz658H9CGz3SR5AcJZBkSQ+QEmICMT4GXuQRlaMA2qfjcuU5kt5RMERySpgPI5AIqJWX\n5fS02bi/EZsPbwYAeBwe+OI+/WdVBVVYfNniHusMEZLLtKBAkNQ8H20ayWK2oNheDIfVoQdCViZ/\ntoFhzAwYMwO7xY5CthCKU9ETvXmJR0yIISEmEOEjkBX1D5E28kWjR7mJgiGSM0RZhC/mg5VR5/K1\nmiNGCiQCmNM4BwDws7E/w4OTHjztCtSEZCNFUfQ8H602ljZF5LK64LQ59cDHxtgG1Au+yWRSAx3G\nChdcKHGU6HlRvMSDF3lE+Ig+zaZA0afVqDBkbqB/IZIzAvEAonwUJQ5jK013tHj9YrREW3BmyZm4\nb8J9YMwMJtRMSFv7hBilYz2fjtNdNsaGEnsJbBabHvxQwN+V2WSG3WKH3WIHWKDUVapPHwqygJgQ\nQ1yII8bHICqifn+16bWBFEzmAgqGSE5IiAn44344bc60/RFp2t+Ev3zxF5hgwrKpy9KWsE1Iqmkr\nqERZhCALMMGkjlwwVpTYS9TVXUz76i6SHG30CACK7cX66JEgCeBETi0MeWKaDVCn42j0KDvQ3SdZ\nT1EU+GN+CLIAN5ue/bqCiSDuf/9+AMBPx/wUF1dfnJZ2CTldWhXnBK+WnmiLt8FmVfNZ3DY3nFan\nHvhQfouxOo4eFbAFKEVpp9yjuBBHTIghxscgKSe2GqFtRTKCgiGS9SJ8BAEugALW2ErTHS1evxgt\nkRYMKx6GX0/8ddraJaQ/tE1LtZVPsiLDDDOsjFWdvgFQU1QDB+ugqstZQluJ5rQ69dEjbXqNEznE\nxFi324rQ6JGx6M6SrCbJEnwxHxgTk7Y/BB989QFWfbFKnR6bRtNjJHv0tGmplbHC4/DAbrHrL5yK\npOBTfAq3zQ2rJX9WeuUbs8msbyuiveHTRo8ESVBHj0Q1/0ib4tQCIwpwU4eCIZLVAokAIkIEJfb0\nJE2HuBDua7wPAHDrmFsxrnpcWtol5GSnquJ88qal3U13aY8huUcbPYIVKLIX6Sv9tBFArWp2d9uK\n5FOJg3SiYIhkLU7k4I/74bA40pbXsGT9ErREWlBbVIs5E+ekpU1CTt60VJvu0jYtzbYqziS9TCaT\nOnoEdVPaQY5BnbYV6bgpbYTvvK0IjR71DQVDJCtplaY5icMgx6C0tLnuwDr86fM/0fQYMdzJm5aa\nYNLr96Rq01KS3zpuK6JtSquNHPESjxivFoYMi2F9WxFGUUskKIqS4d5nH/pfRrJSVIiiLd6mVppO\ngxAXwuy1swEAt1x0C+qH0D5jJDU6Lq8WZRFA+zRIOjctJfnt5G1FOo4eCbKgBkaxMAB1taxZNNO2\nIh1QMESyjiRL8Ea9MJvNaXtX/NCGh9AcaVanx75J02MkOafatNRpdcJlc+mBD013EaPpo0dwoJAt\nRLG1GJ/jc5xRdAZks9xlWxGTyaRPrw20sgsUDJGsE+JCiAgRFNuL09Le+gPr8fpnrwMAnpr2VNo2\ngCW5Txvt0fJ8AOT0pqUkv2nBjdPmhNVq7bIpLSdyiPJR8CKPmBKDrMj6tiL5/jucdDAkiiLWrVuH\nL7/8EjNmzEBBQQGOHj2KwsJCuN3pKYxH8g8ncvDFfHBYHGl51xzmwpjdeGJ6bPQtuGTIJYa3SXJT\nx01LBVldqaW9i87nTUtJfuu4KS1YoNR5UmFIMY64EEeUj3baViTfRo+SCoa+/vprXHnllTh48CA4\njsOUKVNQUFCAxx9/HBzHYcWKFanuJxkAFEVBW6INCSmRtqTppRuW4mj4KIYWDcXcSXPT0ibJfrRp\nKRmoumxKi5IetxXJp01pk+r1XXfdhbq6OuzcuRMej0c//r3vfQ+33XZbyjpHBpaYEENbvA0FtvRU\nmt7w9QZ9euzJqU/S9NgA1bGKs7ZpqVbFmTYtJaT7bUW0EdLuthUxwQQLY8mpNwtJzUN8+OGHmDdv\nHmw2W6fjtbW1OHLkSL+u9dxzz6G2thZ2ux319fXYsmXLKc/nOA4PPvgghg4dCpZlUVtbi5UrV+o/\nf/HFFzFp0iSUlJSgpKQEkydP7vWaJPNkRYY35tXflRgtwkf01WP/58L/QzvRDyCyIiMuxBHmwmiL\ntyGQCCAhJmA2mTHIMQg1hTWoLanFsJJhGFo8FKWuUhSyhbBb7BQIEXKClbHqW4pUFVRhWMkwDCsZ\nhjOKzkC5qxx2ix2iLCKYCMIf9yOYCCIuxPUVldkmqZEhWZYhSVKX44cPH0ZBQd/f1a9atQoNDQ1Y\nsWIF6uvrsXz5ckybNg27d+9GeXl5t4+ZPn06Wltb8fLLL+Oss85Cc3MzZFnWf75u3Tr88Ic/xIQJ\nE2C32/H4449j6tSp+OKLL1BdXd3/J0vSIsSFEObDaUuafmjDQzgSPoIzis7AA5MeSEubJHO0/AdB\nUrczYC0sbVpKSAqdalsRXuKREBKdthWRZRmshc1wr9slFQxNnToVy5cvxwsvvABAnWOMRCJYuHAh\nrr766j5fZ9myZbjtttswc+ZMAMCKFSvwt7/9DStXrsScOV2XN69Zswbr16/H/v37MWiQmlNSW1vb\n6ZzXX3+90/cvvfQS/vrXv6KpqQk/+clP+vM0SZrwEg9v1Ju2pOkPD36I1z59DQDw5JQn4bK5DG+T\npJckS+AFtTIvoCY62612lDnL1D/YDEujPIQYrOOmtLC35+JpH9lUWiKpYOipp57CtGnTcM455yCR\nSGDGjBnYu3cvSktL8ac//alP1+B5Hlu3bsXcue1Jq2azGZMnT8bmzZu7fcw777yDuro6PPHEE3jt\ntdfgcrlw7bXXYunSpXA4uq8WHIvFIAiCHjx1h+M4cBynfx8KhQAAgiBAELJrfx+tP9nWr9NxPHoc\nMS6mLvMUu4449kQ7tz+PifARzH5PnR77yfk/wSWDL+nX47NVMvcin2h/ZONcHAAQiodgt9lRwpbo\ne3hpxegAQJZkyJLc0+XyQj7+rUgG3Yd22XAvzDDDbrbDbrYb0pdkr5dUMDRkyBDs3LkTq1atws6d\nOxGJRHDrrbfipptu6jEoOZnX64UkSaioqOh0vKKiArt27er2Mfv378fGjRtht9vx1ltvwev14o47\n7oDP58Pvf//7bh/z61//GoMHD8bkyZN77Mujjz6KxYsXdzm+du1aOJ3ZmVTb2NiY6S6k3Ff4KqnH\n7dy0s8/nrji0AofDh1FuK8dVuArbNmxLqs1s1Z97kc++2prc71I+yse/Fcmg+9Aun+9FLBZL6nH9\nDoYEQcDPfvYzzJ8/HzfddBNuuummpBpOhiyrFTJff/11FBUVAVCn2m644QY8//zzXQKxxx57DH/+\n85+xbt062O32Hq87d+5cNDQ06N+HQiHU1NRg6tSpKCxMz3YQfSUIAhobGzFlyhRYrbldy0RWZDSH\nmxHhIyiyF/X78ZIoYeemnbhwwoVgLL1PeXx06COs2bEGAPDMfzyDiTUT+91mturvvchFsiKDEzm9\nwCFjUmujuGwu2C12sBYWiqTkzf+P05VPfytOB92HdgPhXmgzO/3V72DIarXir3/9K+bPn59Ug5rS\n0lIwDIPW1tZOx1tbW1FZWdntY6qqqlBdXa0HQgAwatQoKIqCw4cPY/jw4frxJ598Eo899hjef/99\nXHDBBafsC8uyYNmuiVxWqzVrf2GyuW99FUgEEJWiKHYVn9bcMWNheg0AonwU9zfdDwD48QU/xqXD\nLk26vWzWl3uRSzomPgPQd3B3Wp2wW+xdlu1qQ+T58P8jVeheqOg+tMvne5Hs80rqFei6667D22+/\nnVSDGpvNhrFjx6KpqUk/JssympqaMH78+G4fM3HiRBw9ehSRSEQ/tmfPHpjNZgwZMkQ/9sQTT2Dp\n0qVYs2YN6urqTqufxBiCJMAX84G1sGlJonvkw0dwKHQI1QXVmHfpPMPbI8mRZAlxIY5AIgB/3A9e\n5MEyrL50t7a4FlUFVSiyF4G1sLT6ixCSEknlDA0fPhxLlizBRx99hLFjx8Ll6rwa51e/+lWfrtPQ\n0ICbb74ZdXV1GDduHJYvX45oNKqvLps7dy6OHDmCV199FQAwY8YMLF26FDNnzsTixYvh9Xpx3333\n4ZZbbtGnyB5//HEsWLAAb7zxBmpra9HS0gIAcLvdtE1IFmlLtCEuxtNSaXrToU14ZecrANTiim4b\n/R5ki46rSwRZAGNiYGNs+uiPtrcXBT2EECMlFQy9/PLLKC4uxtatW7F169ZOPzOZTH0Ohm688UYc\nP34cCxYsQEtLC0aPHo01a9boSdXNzc04ePCgfr7b7UZjYyPuvPNO1NXVwePxYPr06XjooYf0c373\nu9+B53nccMMNndpauHAhFi1alMzTJSkWE2Lwx/xpCUpiQgz3rr0XAPCjC36ES4fm5/RYLtFrj4g8\nFCiwMTY4rU4UsAVgGTZto4WEEKJJKhj66qvUrdSYNWsWZs2a1e3PXnnllS7HRo4cecpM+AMHDqSo\nZ8QIsiLDF/NBhtxpqbNRHvnwERwMHlSnxybR9FgmKIoCTuL0vb4sJgtYC6tWqbXawTIsbWxKCMmo\n095RTVEUAKBhbNInYS6MIBdEEdv/1WP9tfnQZvx+h1py4cmpT+pVUYnxBEnds4iTOLXiM8OiiC3S\np75YhvJ9CCHZI+mx6FdffRXnn38+HA4HHA4HLrjgArz22mup7BvJM4IkwBvzpqX6b8fpsZvOv4mm\nxwym7felJT4nxASsZiuq3FWoLa5FbUl74rPdYqdAiBCSVZIaGVq2bBnmz5+PWbNmYeJEtVbLxo0b\n8fOf/xxerxf33HNPSjtJ8kMgEUBcjKPEXmJ4W49tfAxfB7/G4ILBmH/p6ZWBIF0pigJBFsCJHARZ\ngBnqvkQehwcOqwMsw+bMbtWEEJJUMPTb3/4Wv/vd7zrt9XXttdfi3HPPxaJFiygYIl3EhTj8cT9c\nVpfhL5D/OPwPvLz9ZQDAb6b8hqbHUkSSJXASB07koEABy7BwWp1w29xgLSzsFjslPhNCclJSwVBz\nczMmTJjQ5fiECRPQ3Nx82p0i+UVRFPjiPsiK8bsUx4U47n1PnR774Xk/xGW1lxnaXj7rLvHZZrGp\nic8WO+wWOyU+E0LyQlJv48466yz85S9/6XJ81apVnapAEwIAYT6MYCKYlqX0j330GA4ED6DKXYUF\n31pgeHv5RpAERPko2uJtCHJByLKMAlsBagprUFtSi9riWpS5ylDAFlAgRAjJG0mNDC1evBg33ngj\nNmzYoOcMffTRR2hqauo2SCIDlyiLOB49DitjNTxp+uPDH+Plbe3TY4Vsdu0rl4067vclKRKsZitY\nhkWJvUTN/bGwsJhPe9EpIYRktaT+yv3nf/4nPv74Yzz99NP6thyjRo3Cli1bcNFFF6W0gyS3BeLp\nSZqOC3E0rG2AAgU/OPcHuHzY5Ya2l8s67vdlggmshUWxvRgum4sSnwkhA1LSb/nGjh2LP/7xj6ns\nC8kzcSEOX9wHp9Vp+Ivr4x89jgOBA6h0V9L02EkkWQIv8UiICQCA1WyF3WpHmbNMr/lj9KgdIYRk\ns6SCodWrV4NhGEybNq3T8ffeew+yLOOqq65KSedI7lIUBf64H5IsGb6a659H/4mXtr0EAHhi8hMo\nshtf0DGb9bTfV5mrDA6LOvWVjurfhBCSK5JKoJ4zZ063xxVF6fFnZGCJ8BEEuSDcrLFJ05zMYfb7\ns6FAwfRzp+OKM68wtL1sJcoiAHVaMpAIQJRFuG1uDCkcgtriWgwrGYZyVzkK2AIKhAgh5CRJjQzt\n3bsXI0aM6HJ85MiR2Ldv32l3iuQ2URbhjXlhMVsMT759o/kNfBX4CpWuSiz61iJD28omJyc+myR1\nGrLMVQa3ww27xU6Jz4QQ0kdJ/bUsKirC/v37UVtb2+n4vn374HK5UtEvksMC8QCifBQlDmOTpj9p\n/gTvHH8HAPD4lMfzfnqsY+IzANgtdhTbi+G0OmFRLNiHffA4PbBaack7IYT0R1LB0He/+13cfffd\neOutt/CNb3wDgBoI3Xvvvbj22mtT2kGSWxJiAv64H06bsUnTcSGO2Y3q9NgNo27A5DMnG9ZWpmiJ\nz5zEQVZk2Mw2sBYWpc5S2C32TonPgiBkuLeEEJK7kgqGnnjiCVx55ZUYOXIkhgwZAgA4dOgQLr30\nUjz55JMp7SDJHYqiwB/zQ5AFw3OFntz0JPYH9qPEUoIFk/Jj9VhPic8eh0ff7d1qttKyd0IISbGk\np8k2bdqExsZG7Ny5Ew6HAxdeeCEmTZqU6v6RHBLhIwhwAcNXj31y9BO8sO0FAMAvan6BYnuxoe0Z\nSZRFNQASeShQYGNscFqdKGALwDIsWAtL+30RQojB+hUMbd68GT6fD9/5zndgMpkwdepUNDc3Y+HC\nhYjFYrjuuuvw29/+Fixr7P5TJPtIsgRfzAfGxBiauBsX4mh4rwGyIuP6kddjnH2cYW0Zobv9vlgL\nq+73ZVWnvmibC0IISa9+veVcsmQJvvjiC/37zz77DLfddhumTJmCOXPm4N1338Wjjz6a8k6S7BdI\nBBARIobvP7Zs8zJ82fYlyl3lWHTpIkPbShVtvy9/3I9AIgBZllHEFnXa76vUVQq3zU2BECGEZEC/\n3sLv2LEDS5cu1b//85//jHHjxuHFF18EANTU1GDhwoVYtGhRSjtJshsncvDH/XBYHIbms2xr3oYV\nW1cAAB6f/HjWTo9py961xGdtv69BjkFq4jPt90UIIVmlX3+R29raUFFRoX+/fv36TtWmL774Yhw6\ndCh1vSNZT6s0zUkcBjkGGdZOQkzgnvfuUafHRl2Pqd+YCkmUDGuvPxRFgSAL4EQOgizADDNYCwuP\nw6Nudkr7fRFCSFbrVzBUUVGBr776CjU1NeB5Htu2bcPixYv1n4fDYapxMsBEhSja4m0osBmbNL1s\n8zLs8+9DmbMMSy5bYmhbfSHJEjiJAydyUKCAZVg4rU64bW6wFhZ2i50SnwkhJEf0Kxi6+uqrMWfO\nHDz++ON4++234XQ6O60g+/TTT/W6QyT/SbIEb9QLs9lsaK7L9ubt+N0nvwOgTo8ZXcyxNyEuBEVR\n2hOfLXbYLXbK9yGEkBzVr2Bo6dKluP766/Gtb30Lbrcbf/jDH2Czte9ztHLlSkydOjXlnSTZKcSF\nEBEihubuJMQEGtaqq8e+N/J7mHbWtN4fZKC4EIcJJgwpGgKn1UmjP4QQkgf6FQyVlpZiw4YNCAaD\ncLvdYBim08/ffPNNuN3GriYi2YETOfhiPjgsDkMDgqf/8TT2+Pag1FmKJZdndnpMlEXExTiqC6oN\nXzVHCCEkfZIuutidQYOMS6Al2UNRFLQl2sBJnKFTVjtaduD5fz4PAHjsiscMTdDujaIoCHEheBye\nrF3FRgghJDk0xk/6LSbE0BZvM3R0hBM5vbjidSOuw1XDr+r9QQYKcSG4rW6UOktpVRghhOQZCoZI\nv8iKDG/MC5PJZGjC8NP/eBq7fbtR6izF0m8v7f0BBooLcTAmBuXuckqSJoSQPETBEOmXEBdCmA8b\nOiq0s2WnPj326BWPZnR6TJRFJMQEylxlcFqdGesHIYQQ41AwRPqMl3h4o15Dk6a16TFJkXDtiGtx\n9fCrDWmnL/Q8ISflCRFCSD6jYIj0WVu8DQkpAYfVYVgbz3z8DHb5dsHj8OChyx8yrJ2+oDwhQggZ\nGCgYIn2ibTRq5PTYZ62f4dktzwIAHrniEXicHsPa6k3HPCHaR4wQQvIbBUOkV7Iiwx/3AwBsjK2X\ns5PDSzzuee8eSIqEa86+Bt85+zuGtNMXWp5Qubuc8oQIIWQAoGCI9CrEhRDiQihgjdt/7L8+/i/8\n2/tvDHIMwsPfftiwdnrTMU+oiO2+nhYhhJD8QsEQOSVBEuCL+cBaWMOSpj8/9jl+u+W3ADI/PRbk\ngpQnRAghAwwFQ+SU2hJtiItxw6aLeInH3WvuhiiL+I/h/4Frzr7GkHb6Ii7EYTFZUOGuoDwhQggZ\nQCgYIj2KCTH4Y8YmTf/249/i395/o8RegkeueMSwdnojSIKeJ2TkajlCCCHZh4Ih0i1ZkeGL+SBD\nNixp+vNjn+O/tvwXAODhKx5GqbPUkHZ6oygKwnwYpc5SyhMihJABiIIh0q0wF0aQC6LAZkzStCAJ\nuOe9eyDKIq4+62pce/a1hrTTF9rz9Dg9lCdECCEDEAVDpAtBEuCNecEyLBgzY0gbz255Fv86/i99\neixTQUhciMNqtqLcRfWECCFkoKJgiHQRSAQMTZr+4vgXWP7xcgDAw99+GGWuMkPa6Y2eJ+SiPCFC\nCBnIKBgincSFOPxxP1xWlyGjNYIkoOG9BoiyiKvOugrXjsjM9FjHPKFCtjAjfSCEEJIdKBgiOkVR\n4Iv7IMkSWAtrSBvP/vNZfH7scxTbizM6PUZ5QoQQQjQUDBFdmA8jmAgaVmn6X8f/hWf+8QwA4KHL\nH0K5q9yQdnoTE2KUJ0QIIURHwRABoO7HdTx6HFbGakjStDY9JsgCpn1jGq4beV3K2+hrP3iJpzwh\nQgghOgqGCAAgEFeTpl1WlyHXf/6T5/HZsc9QzBbj0SsezcjUlKzICHNheBweyhMihBCio2CI6EnT\nTqvTkCBll3cXnt78NABg6beXosJdkfI2+iKUCKHQXkj7jhFCCOmEgqEBTlEU+ON+iLIIu8We8uuL\nsoh73rsHgixg6jem4nsjv5fyNvoiJsRgZdQ8IaNqJxFCCMlNGQ+GnnvuOdTW1sJut6O+vh5btmw5\n5fkcx+HBBx/E0KFDwbIsamtrsXLlyk7nvPnmmxg5ciTsdjvOP/98rF692sinkNMifETdqZ01Zv+x\n5//5PD5t/RRFbBEeu+KxjIzIdMwTMiLgI4QQktsyGgytWrUKDQ0NWLhwIbZt24YLL7wQ06ZNw7Fj\nx3p8zPTp09HU1ISXX34Zu3fvxp/+9CeMGDFC//mmTZvwwx/+ELfeeiu2b9+O6667Dtdddx0+//zz\ndDylnCLKIrwxLyxmiyGrqnZ5d2HZ5mUAgCWXL8nI9JiWJ0T1hAghhPQko8HQsmXLcNttt2HmzJk4\n55xzsGLFCjidzi4jPZo1a9Zg/fr1WL16NSZPnoza2lqMHz8eEydO1M955plncOWVV+K+++7DqFGj\nsHTpUowZMwbPPvtsup5WzggmgojyUUOSpkVZ1FePTT5zMv5z1H+mvI2+CCVCKLIXweOgekKEEEK6\nl7FgiOd5bN26FZMnT27vjNmMyZMnY/Pmzd0+5p133kFdXR2eeOIJVFdX4+yzz8bs2bMRj8f1czZv\n3tzpmgAwbdq0Hq85UCXEBHwxH5w2Y5KmV3yyAjtbd6KILcLjkx/PSCAS5aOwMTaUucooT4gQQkiP\nMlZxzuv1QpIkVFR0njqpqKjArl27un3M/v37sXHjRtjtdrz11lvwer2444474PP58Pvf/x4A0NLS\n0u01W1paeuwLx3HgOE7/PhQKAQAEQYAgCEk9P6No/TmdfimKguOR4+B4Dg6HA5Iopap7AIA9vj14\natNTAICFly5Emb0s5W0A0K/Z3bV5iUeCT6C6qBqMwmTdv2OqpeL3Ih/QfWhH90JF96HdQLgXyT63\nnCq/K8syTCYTXn/9dRQVFQFQp9puuOEGPP/883A4kiui9+ijj2Lx4sVdjq9duxZOpzGblZ6uxsbG\nTHehW5IiYc7eOeBlHnWFdRh2bBi2Hd9maJs7N+3s8Wf7sd/QtrNNtv5epBvdh3Z0L1R0H9rl872I\nxWJJPS5jwVBpaSkYhkFra2un462traisrOz2MVVVVaiurtYDIQAYNWoUFEXB4cOHMXz4cFRWVvbr\nmgAwd+5cNDQ06N+HQiHU1NRg6tSpKCzMrqRbQRDQ2NiIKVOmwGq19vvxkizhSOgIOInYGICGAAAg\nAElEQVQzZNuN3239HfbG9qLQVojnb3gele6e7/vpkkQJOzftxIUTLgRjaZ8GC8QDKGALUOmuHDDT\nY6f7e5Ev6D60o3uhovvQbiDcC21mp78yFgzZbDaMHTsWTU1NuO46dWsGWZbR1NSEWbNmdfuYiRMn\n4s0330QkEoHbrS4F37NnD8xmM4YMGQIAGD9+PJqamnD33Xfrj2tsbMT48eN77AvLsmDZrhuTWq3W\nrP2FSbZvoVgIcSWOEmdJyvN49vr2Ytk/1NVjiy5fhOri6pRevyeMhdGDoSgfhYN1oLKockAuo8/m\n39l0ovvQju6Fiu5Du3y+F8k+r4yuJmtoaMCLL76IP/zhD/j3v/+NX/ziF4hGo5g5cyYAdcTmJz/5\niX7+jBkz4PF4MHPmTPzrX//Chg0bcN999+GWW27Rp8juuusurFmzBk899RR27dqFRYsW4ZNPPukx\nwBpIOJGDP+6Hw+JIeSCkFVfkJA7frv02pp8zPaXX7wte4iFIAsrdVE+IEEJI32U0Z+jGG2/E8ePH\nsWDBArS0tGD06NFYs2aNngDd3NyMgwcP6ue73W40NjbizjvvRF1dHTweD6ZPn46HHnpIP2fChAl4\n4403MG/ePDzwwAMYPnw43n77bZx33nlpf37ZRKs0zUkcBjkGpfz6L259EdtbtqPAVoDHp6R/9Zis\nyIjwEVS4KlBgS/30HyGEkPyV8QTqWbNm9Thq88orr3Q5NnLkyF6Tv77//e/j+9//fiq6lzeiQhRt\n8TZDAoV9/n34zabfAAAWXbYIgwsGp7yN3gQTQRSxRRjkGET1hAghhPRLxrfjIMaTZAm+mA9msxlW\nJrXzxJIs6dNjl9dejhvPvTGl1++LKB8Fy7C07xghhJCkUDA0AIS4EMJ8GG5b6vcfe3Hbi9jWvC1j\n02MA9Dwh1tI1CZ4QQgjpDQVDeY4TOfhiPjgsDphNqf3n3uffh998pE6PLfzWQlQXpGf1mEZWZABA\nqYv2HSOEEJI8CobymKIoaEu0gZM4OKzJFaTsiSRLaHivAQkpgW8N/RZ+cN4PUnr9vggl1HoSJfaS\ntLdNCCEkf1AwlMdiQgxt8TZDpsde2v4StjZvhdvmxm+m/Cbt02MRPqJPi1GeECGEkNNBwVCekhUZ\n3pgXJpMp5UnTX7Z9iSc2PgEAWHDpAlQXpnd6jBM5iJKIMldZWtslhBCSnygYylNGJU1LsoR737sX\nCSmBS4deihnnz0jp9XsjKzKiQhTlrnJDRrwIIYQMPBQM5SFe4uGNemG32FOeNL1yx0r88+g/4ba5\n8eSUJ9M+PRZMBFFsL8YgZ+oLRxJCCBmYKBjKQ23xNiSkBJxWZ0qvu79tPx7b+BgAYP6l89M+PRbh\nI7Bb7ChzlqU8yCOEEDJw0StKnonyUfjj/pRPIcmKjHvX3ouEmMCkMybhpvNvSun1e8OJHCRZQrmL\n6gkRQghJLQqG8oisyPDH/QAAG2NL6bVXbl+JLUe2wGV1pX31mJYnVOYsQwFL+44RQghJLQqG8kiY\nCyPEhVIeMHzV9hUe3fgoAGDepfNQU1ST0uv3hvKECCGEGImCoTwhSAK8MS9YC5vSfJqO02MTaybi\nRxf8KGXX7gstT6jcVU55QoQQQgxBry55oi3RhrgYT3nS9Cs7XsHHRz6G0+rEU1OfSmtA0jFPKNXT\nfoQQQoiGgqE8EBNi8MdSnzR9IHAAj3z4CID0T49JskR5QoQQQtKCgqEcJysyfDEfZMgpHT2RFRmz\n185GXIxjQs0E/PiCH6fs2n0R5IIosZdQnhAhhBDDUTCU48JcGEEuiAJbakdPXt35KjYf3pyR6bEw\nF4bD4kCZi+oJEUIIMR690uQwPWmaYVO6WenXga/x0IaHAAAPTnoQZxSdkbJr94YTOSiKggp3BeUJ\nEUIISQsKhnJYIBFIedK0tnosLsYxfsh4/OTCn6Ts2r3R84RcZbTvGCGEkLShYChHJYQE/HE/XFZX\nSgsgatNjDosjrdNjiqLoeUIljpK0tEkIIYQAFAzlrLZEGyRZSunWFAeDB/Hwhw8DUKfHhhYPTdm1\nexPhI5QnRAghJCPoVSdHBRPBlC4516bHYkIMl1RfgptH35yya/cmISYoT4gQQkjGUDCUY0RZBABY\nGEtKk6b/+OkfsenQJtgtdjw1LX3TY5IsISbEKE+IEEJIxlAwlGOCiSAAwGV1peyah4KH9NVjD3zz\nAdQW16bs2qeiKApCXAiD7IMoT4gQQkjGUDCUQxJiAm3xNgBIWdK0oiiY3TgbUSGK+up6zLxoZkqu\n2xcRPgKn1YlSVynlCRFCCMkYegXKEYqiwBfz6dNkqfLHz/6IjQc3wm6x48mpT6YtKNHyhGjfMUII\nIZlGwVCOiPARBLkg3Gzq8moOhw5j6fqlAIA535yDM0vOTNm1T6VjnpDLlrrpPkIIISQZFAzlAFEW\n4Y15YTFbYDFbUnJNRVEwe606PTauehxuvejWlFy3L+0GuSDlCRFCCMkaFAzlgGAiiKgQTWnS9Buf\nvYEPD34IO2NPa3HFMB+Gy+qiekKEEEKyBr0aZbmEmIAv5oPT6kxZ0vSR0BEs2bAEAPDrb/46bdNj\nCTEBE0wod5XDyljT0iYhhBDSGwqGspiiKPDH/BBkAXaLPWXXnN04GxE+grrBdWmbHpNkCXEhjjIn\n5QkRQgjJLhQMZbEIH0Fboi2llab/9PmfsOHrDfr0WCoLN/ZEzxNyDEKxo9jw9gghhJD+oGAoS0my\nBF/Ml9Kk6SOhI1i8fjEA4L6J9+GsQWel5Lq90fKESp1UT4gQQkj2oVemLBVIBBARIinbokJRFNzf\neD8ifARjq8bitjG3peS6vYkLccoTIoQQktUoGMpCnMjBH/fDYXGkLGl61RersO7rdWAZFsumLUvL\n9Jgoi4iLcZS7yilPiBBCSNaiYCjLKIoCf9wPTuLgsDpScs2j4aNYtG4RAOD+ifenZXpM23fM4/Cg\n2E55QoQQQrIXBUNZJipE0RZvQ4EtNUnTiqLg142/RpgPY0zVmLRNj4X5MNxWN0qdpSkb3SKEEEKM\nQMFQFtGSps1mc8rya/7yxV/wwYEP1OmxqemZHtPzhNyUJ0QIIST7UTCURUJcSB1RSVHS9NHwUSxa\nvwgAMHvCbAz3DE/JdU+lY56Q0+o0vD1CCCHkdFEwlCV4iYcv5oPD4kjJ8nNFUfDr93+NEBfCRZUX\n4faxt6egl723SXlChBBCcg0FQ1ki1UnTb/7rTXzwlTo99vS0p1NWq+hUQlyI8oQIIYTkHAqGskCU\nV5OmUzU91hxuxsJ1CwEA946/Ny3TY3EhDsbEUJ4QIYSQnEPBUIbJigxvzAuTyZSSIKLj9NjoitH4\nWd3PUtDLUxNlEQkxgXI35QkRQgjJPRQMZViqk6b/+u+/oumrJtgYG5ZNW2b49JieJ+T0oIgtMrQt\nQgghxAgUDGUQL/HwRr2wW+wpSZpuibRgwd8XAAAaxjdgROmI075mbyhPiBBCSK6jYCiD2uJtSEiJ\nlEwtadNjQS6ICyouwC/qfpGCHp5axzyhdCRoE0IIIUagYChDUp00/f/+/f/w/v73YWNsaVk9RnlC\nhBBC8gUFQxkgKzL8cT8UKLAxttO+XmukVZ8eu+eSezCydORpX/NUKE+IEEJIPsl4MPTcc8+htrYW\ndrsd9fX12LJlS4/nrlu3DiaTqctHS0tLp/OWL1+OESNGwOFwoKamBvfccw8SiYTRT6XPwlwYIS6E\nAvb09x9TFAVzmuYgwAVwQcUFuOPiO1LQw1MLckEU2AooT4gQQkheyGiix6pVq9DQ0IAVK1agvr4e\ny5cvx7Rp07B7926Ul5f3+Ljdu3ejsLBQ/77juW+88QbmzJmDlStXYsKECdizZw9mzpwJk8mEZcuW\nGfp8+kKQBHhjXrAWNiVJ02/vehtrv1wLq9mKZVONXz0WF+KwmCwod1GeECGEkPyQ0ZGhZcuW4bbb\nbsPMmTNxzjnnYMWKFXA6nVi5cuUpH1deXo7Kykr9w2xufxqbNm3CxIkTMWPGDNTW1mLq1Kn4wQ9+\ncMoRp3QSZAEJMQGH5fQrTR+LHsO8v88DANx9yd0YVTbqtK95KoIk6HlCqaqUTQghhGRaxt7a8zyP\nrVu3Yu7cufoxs9mMyZMnY/Pmzad87OjRo8FxHM477zwsWrQIEydO1H82YcIE/PGPf8SWLVswbtw4\n7N+/H6tXr8aPf/zjHq/HcRw4jtO/D4VCAABBECAIQrJPsVuiIEIWZUiilNQUkyRK+nXmNM5BIBHA\neWXn4ecX/Vz/mREURUEwEYTH6YHT7Ez5fUmG1ods6Eum0b1Q0X1oR/dCRfeh3UC4F8k+t4wFQ16v\nF5IkoaKiotPxiooK7Nq1q9vHVFVVYcWKFairqwPHcXjppZdw2WWX4eOPP8aYMWMAADNmzIDX68U3\nv/lNKIoCURTx85//HA888ECPfXn00UexePHiLsfXrl0LpzM7V0o9u/pZvPf1e2DA4KeDforPPvos\nLe1+ha/S0k5/NDY2ZroLWYPuhYruQzu6Fyq6D+3y+V7EYrGkHpdTSR8jRozAiBHthQQnTJiAL7/8\nEk8//TRee+01AGqS9SOPPILnn38e9fX12LdvH+666y4sXboU8+fP7/a6c+fORUNDg/59KBRCTU0N\npk6d2ik3KRXiQhxfB75Gkb0o6ZGh9evXY2WLOpV4V/1duL7++pT28WRxIQ5ZkVFdUA271W5oW/0h\nCAIaGxsxZcoUWK0Dez80uhcqug/t6F6o6D60Gwj3QpvZ6a+MBUOlpaVgGAatra2djre2tqKysrLP\n1xk3bhw2btyofz9//nz86Ec/wk9/+lMAwPnnn49oNIrbb78dDz74YKf8Ig3LsmBZtstxq9Wa8l8Y\nAQLMFjMYC5NUMKQoClYcXoEAF8C5ZefiV5f8CgzDpLSPHQmSANEkorqwGgX201/9ZgQj/p1yFd0L\nFd2HdnQvVHQf2uXzvUj2eWUsgdpms2Hs2LFoamrSj8myjKamJowfP77P19mxYweqqqr072OxGCyW\nzjGeFiwoinKavc68d/e+i38E/wGL2YKnr3za0B3iFUVBmA/D4/CgkE3tCBkhhBCSLTI6TdbQ0ICb\nb74ZdXV1GDduHJYvX45oNIqZM2cCUKevjhw5gldffRWAWj9o2LBhOPfcc5FIJPDSSy/hgw8+wNq1\na/VrXnPNNVi2bBlGjx6tT5PNnz8f11xzjaEjKOngjXkxf5061XfnxXfi3LJzDW1PqyfkcXqonhAh\nhJC8ldFg6MYbb8Tx48exYMECtLS0YPTo0VizZo2eVN3c3IyDBw/q5/M8j3vvvRdHjhyB0+nEBRdc\ngPfffx+XX365fs68efNgMpkwb948HDlyBGVlZbjmmmvw8MMPp/35pdoDTQ+gLdGGWnstfln3S0Pb\nigkxWM1WqidECCEk72X8VW7WrFmYNWtWtz975ZVXOn1///334/777z/l9SwWCxYuXIiFCxemqotZ\n4Z3d7+Bve/8Gi9mCX53xq5Rs49ETQRLASzyqC6qpnhAhhJC8l/HtOEjvvDEvHvzgQQDAL+t+iTOd\nZxrWlqzICHOUJ0QIIWTgoGAoBzz4wYPwx/0YVToKd158p6FthRIhFNoLad8xQgghAwYFQ1nu3T3v\n4n/3/C8YE4PlVy43dHosJsRgZdQ8Icac28nmhBBCSF9RMJTFfDEfHmxSp8fuHHcnzis/z7C2tDyh\nclc57JbsKaxICCGEGI2CoSw27+/z4Iv7MKp0FO665C7D2tHyhEqdpZQnRAghZMChYChL/W3P3/DO\n7nfAmBgsm7bM0OmxUCKEInsRPA6qJ0QIIWTgoWAoC/njfjzwgbqx7C/H/RIXVFxgWFtRPgobY0OZ\nq4zyhAghhAxIFAxloXkfzIM35sVIz0jcXX+3Ye3wEq/mCbkpT4gQQsjARcFQllm9dzX+Z/f/6NNj\nrKXrBrKpICsyIlwEZa4yFNiycwNWQgghJB0oGMoi/rgfc5vmAgDuuPgOXFh5oWFtUZ4QIYQQoqJg\nKIss+PsCeGNenO05G/dcco9h7VCeECGEENKOgqEssWbfGry16y2YTWY8Pe1pw6bHeImHIAmUJ0QI\nIYScQMFQFmiLt2HO+3MAAHfU3YHRlaMNaUdWZER4yhMihBBCOqJgKAss+PsCHI8dx/BBw3HPeOOm\nx4KJIIrYIgxyDKI8IUIIIeSE/7+9ew+K6rz7AP49sNxvK5dlFwTBal5NvEQlIWhbTcVXmmhsbZvU\nUG/pdEbFCWgqmGQSzViVJC1VM0mYpGPMWNtGExSbeAmCGp0QVBSVVlFeFAxyqVLY5SK77D7vHwwH\nN6AB2Ruc72eGGfecZ895nq+45+c5z9nDYsjJDpcfRs7lHPnymL0uXbUYW+Ct8uZzx4iIiL6DxZAT\n/bftv1ib33l5bHncckzSTbLLfrrmCYX5hdltLhIREdFgxWLIidYdW4f6lnqMCh6F1Qmr7bKPu+cJ\n8bljREREPamc3QElMVvM+KryK1ysu4jbrbfx2aXP4Ca5Iet/s+x2eezueUJERETUE4shB8m5lIPU\nQ6n4Vv+t1fJZI2dhSsQUu+yz2djMeUJERETfg5fJHCDnUg5+ufuXPQohAPjy/77EgasHbL7P9o52\ndJg7oPHTcJ4QERHRfbAYsjOzxYzUQ6kQEPdss+7YOpgtZpvt0yIsaDG1QOOnQYAXv0+IiIjoflgM\n2dmJqhO9nhHqIiBw03ATRdVFNttn050mqL3VCPblPCEiIqLvw2LIzmoMNX1qV99Sb5P9dc0TCvMN\ng5vEv14iIqLvw6OlnekCdH1qp/HTDHhf7R3tMFvMnCdERETUDyyG7OxH0T/C8MDhkND74y8kSIgI\niEB8ZPyA9mO2mNFiakGYbxjnCREREfUDiyE7c3dzx9akrQDQoyDqev3GjDcGfOu7vl2PYd7DOE+I\niIion1gMOcD8sfPx6bOfIjIw0mq5LkCHD+Z+gKdGPzWg7cvzhPw4T4iIiKi/+KWLDjJ/7HzM+595\nyKvIw8W6i4hRx+CJ4U8M+IxQ1zyhiKAIeLp72qi3REREysFiyIHc3dzx4xE/RlRgFNTeakhS7/OI\n+qprnpDWTwt/T38b9ZKIiEhZeE1lEGtqb+I8ISIiogFiMTRIGdoN8FH5cJ4QERHRAPEoOkgJIRDu\nH855QkRERAPEYmiQ6XqGWahfKOcJERER2QCLoUFECAF9ux4AoPZWO7k3REREQwOLoUGk6/uEAHCe\nEBERkY3wiDpI3Om4AyGETZ5hRkRERN1YDA0CZosZraZWhPmFwc/Tz9ndISIiGlJYDLm4rnlCwd7B\nGOYzzNndISIiGnJYDLm4ZmMzfD18EeoXynlCREREdsCjqwu7e54Qv0+IiIjIPlgMuSizxYw2Uxvn\nCREREdkZiyEXJISQnzvGeUJERET2xWLIBRmMBvh5+PG5Y0RERA7AI62LudNxBxIkaPw08HD3cHZ3\niIiIhjwWQy5Enifky3lCREREjsJiyEV0zRMK9gmG2ofPHSMiInIUFkMuomueUKgvv0+IiIjIkXjU\ndQFtpjbOEyIiInISpxdD7777LmJiYuDt7Y34+HicOnXqnm2PHTsGSZJ6/NTW1lq1a2xsREpKCnQ6\nHby8vPDQQw/hwIED9h7KA+mwdKCtow0aPw3nCRERETmBypk7/+STT7B69WpkZ2cjPj4eW7ZswezZ\ns1FWVgaN5t5PZy8rK0NgYKD8+u62RqMRs2bNgkajwaefforIyEhUVlZCrXa9eThdzx0L8QmB2tv1\n+kdERKQETi2GsrKy8Lvf/Q5Lly4FAGRnZ+OLL77A9u3bsXbt2nu+T6PR3LO42b59OxoaGvD111/D\nw6PzklNMTIzN+24LBqMB/h7+CPUNhSRJzu4OERGRIjmtGDIajSguLsbLL78sL3Nzc0NiYiIKCwvv\n+95HH30U7e3tGDduHNavX49p06bJ6/bv34+EhASkpKQgNzcXYWFheP7555GRkQF3d/det9fe3o72\n9nb5tV6vBwCYTCaYTKaBDLOHDlMHLB0WtNxpgcViQbBvMGABTJa+7aerP7bu12DELLoxi07MoRuz\n6MQcuikhiwcdm9OKoVu3bsFsNiM8PNxqeXh4OC5fvtzre3Q6HbKzsxEXF4f29nb85S9/wYwZM1BU\nVITJkycDACoqKlBQUIDk5GQcOHAA5eXlWLFiBUwmE9atW9frdjdv3ow33nijx/Ivv/wSvr6+Axzp\n/V3F1Qd6X15eno17Mngxi27MohNz6MYsOjGHbkM5i9bW1gd6nySEEDbuS5/cvHkTkZGR+Prrr5GQ\nkCAvT09Px/Hjx1FUVNSn7UyfPh3R0dHYuXMnAOChhx7CnTt3cO3aNflMUFZWFt5++23U1NT0uo3e\nzgxFRUXh1q1bVnOTbKHN1IYbTTcQ5B0EjZ+m35fHTCYT8vLyMGvWLPkyoFIxi27MohNz6MYsOjGH\nbkrIQq/XIzQ0FE1NTf06fjvtzFBoaCjc3d1RV1dntbyurg5arbbP23n88cdx8uRJ+bVOp4OHh4fV\nJbGxY8eitrYWRqMRnp6ePbbh5eUFLy+vHss9PDxs/gtjlsxQ+6kR7h8OlduDx2+Pvg1WzKIbs+jE\nHLoxi07ModtQzuJBx+W0W+s9PT0xZcoU5Ofny8ssFgvy8/OtzhR9n5KSEuh0Ovn1tGnTUF5eDovF\nIi+7cuUKdDpdr4WQo3mrvBEREDGgQoiIiIhsx6nfM7R69Wp8+OGH+Pjjj3Hp0iUsX74cLS0t8t1l\nL7/8MhYtWiS337JlC3Jzc1FeXo7S0lKkpaWhoKAAKSkpcpvly5ejoaEBqampuHLlCr744gts2rTJ\nqo2z8c4xIiIi1+HU0xPPPfcc/vOf/+D1119HbW0tHn30URw6dEieVF1TU4Oqqiq5vdFoxEsvvYTq\n6mr4+vpiwoQJOHLkCJ588km5TVRUFA4fPoxVq1ZhwoQJiIyMRGpqKjIyMhw+PiIiInJ9Tr9Ws3Ll\nSqxcubLXdTt27LB6nZ6ejvT09O/dZkJCAr755htbdI+IiIiGOKc/joOIiIjImVgMERERkaKxGCIi\nIiJFYzFEREREisZiiIiIiBSNxRAREREpGoshIiIiUjQWQ0RERKRoLIaIiIhI0VgMERERkaKxGCIi\nIiJFc/qzyVyREAIAoNfrndyTnkwmE1pbW6HX6+Hh4eHs7jgVs+jGLDoxh27MohNz6KaELLqO213H\n8b5iMdQLg8EAAIiKinJyT4iIiKi/DAYDgoKC+txeEv0tnxTAYrHg5s2bCAgIgCRJzu6OFb1ej6io\nKNy4cQOBgYHO7o5TMYtuzKITc+jGLDoxh25KyEIIAYPBgIiICLi59X0mEM8M9cLNzQ3Dhw93djfu\nKzAwcMj+MvcXs+jGLDoxh27MohNz6DbUs+jPGaEunEBNREREisZiiIiIiBTNff369eud3QnqH3d3\nd8yYMQMqFa9yMotuzKITc+jGLDoxh27MonecQE1ERESKxstkREREpGgshoiIiEjRWAwRERGRorEY\nIiIiIkVjMeQCNm/ejMceewwBAQHQaDT42c9+hrKyMqs2Qgi8/vrr0Ol08PHxQWJiIq5evWrV5s6d\nO0hJSUFISAj8/f3xi1/8AnV1dY4cik1lZmZCkiSkpaXJy5SUQ3V1NX7zm98gJCQEPj4+GD9+PM6c\nOSOvV0oWZrMZr732GmJjY+Hj44Mf/OAH2LBhg9Wzh4ZiFl999RXmzp2LiIgISJKEffv2Wa231Zgb\nGhqQnJyMwMBAqNVq/Pa3v0Vzc7Pdx9cf98vCZDIhIyMD48ePh5+fHyIiIrBo0SLcvHnTahtKyOK7\nli1bBkmSsGXLFqvlQyULmxLkdLNnzxYfffSRKC0tFSUlJeKpp54S0dHRorm5WW6TmZkpgoKCxL59\n+8T58+fFM888I2JjY0VbW5vcZtmyZSIqKkrk5+eLM2fOiCeeeEJMnTrVGUMasFOnTomYmBgxYcIE\nkZqaKi9XSg4NDQ1ixIgRYsmSJaKoqEhUVFSIw4cPi/LycrmNUrLYuHGjCAkJEZ9//rm4du2a2LNn\nj/D39xdbt26V2wzFLA4cOCBeffVVkZOTIwCIvXv3Wq231ZiTkpLExIkTxTfffCNOnDghRo0aJRYs\nWOCQMfbV/bJobGwUiYmJ4pNPPhGXL18WhYWF4vHHHxdTpkyx2oYSsrhbTk6OmDhxooiIiBB//vOf\nrdYNlSxsicWQC6qvrxcAxPHjx4UQQlgsFqHVasXbb78tt2lsbBReXl7i73//u/zaw8ND7NmzR25z\n6dIlAUAUFhY6dgADZDAYxOjRo0VeXp6YPn26XAwpKYeMjAzxwx/+8J7rlZTF008/LV544QWrZfPn\nzxfJyclCCGVk8d2Dnq3G/O9//1sAEKdPn5bbHDx4UEiSJKqrq+09rAdyvwKgy6lTpwQAUVlZKYRQ\nXhbffvutiIyMFKWlpWLEiBFWxdBQzWKgeJnMBTU1NQEAgoODAQDXrl1DbW0tEhMT5TZBQUGIj49H\nYWEhAKC4uBgmk8mqzZgxYxAdHS23GSxSUlLw9NNPW40FUFYO+/fvR1xcHH71q19Bo9Fg0qRJ+PDD\nD+X1Sspi6tSpyM/Px5UrVwAA58+fx8mTJ/HTn/4UgLKy6GKrMRcWFkKtViMuLk5uk5iYCDc3NxQV\nFTloNLbX1NQESZKgVqsBKCsLi8WChQsXYs2aNXjkkUd6rFdSFv3Br6B0MRaLBWlpaZg2bRrGjRsH\nAKitrQUAhIeHW7UNDw+X19XW1sLT01P+x99bm8HgH//4B86ePYvTp0/3WKekHCoqKvD+++9j9erV\neOWVV3D69Gm8+OKL8PT0xOLFixWVxdq1a6HX6zFmzBi4u7vDbDZj48aNSE5OBqCs34suthpzbW0t\nNBqN1XqVSoXg4OBBmQvQOR8mIyMDCxYskB9GqqQs3nzzTahUKrz44ou9rldSFiyQcmsAAAdfSURB\nVP3BYsjFpKSkoLS0FCdPnnR2Vxzuxo0bSE1NRV5eHry9vZ3dHaeyWCyIi4vDpk2bAACTJk1CaWkp\nsrOzsXjxYif3zrF2796NXbt24W9/+xseeeQRlJSUIC0tDREREYrLgu7PZDLh2WefhRAC77//vrO7\n43DFxcXYunUrzp49C0mSnN2dQYWXyVzIypUr8fnnn+Po0aMYPny4vFyr1QJAj9n+dXV18jqtVguj\n0YjGxsZ7tnF1xcXFqK+vx+TJk6FSqaBSqXD8+HFs27YNKpVK/l/wUM8BAHQ6HR5++GGrZWPHjkVV\nVRUA5fxOAMCaNWuQkZGBX//61xg/fjwWLlyIVatWYfPmzQCUlUUXW41Zq9Wivr7ean1HRwcaGhoG\nXS5dhVBlZSXy8vLks0KAcrI4ceIE6uvrER0dLX+GVlZW4qWXXkJMTAwA5WTRXyyGXIAQAitXrsTe\nvXtRUFCA2NhYq/WxsbHQarXIz8+Xl+n1ehQVFSEhIQEAMGXKFHh4eFi1KSsrQ1VVldzG1c2cORMX\nL15ESUmJ/BMXF4fk5GSUlJRg5MiRisgBAKZNm9bj6xWuXLmCESNGAFDO7wQAtLa29niopLu7OywW\nCwBlZdHFVmNOSEhAY2MjiouL5TYFBQWwWCyIj4930GgGrqsQunr1Ko4cOYKQkBCr9UrJYuHChbhw\n4YLVZ2hERATWrFmDw4cPA1BOFv3m7BncJMTy5ctFUFCQOHbsmKipqZF/Wltb5TaZmZlCrVaL3Nxc\nceHCBTFv3rxeb6ONjo4WBQUF4syZMyIhIUEkJCQ4Y0g2c/fdZEIoJ4dTp04JlUolNm7cKK5evSp2\n7dolfH19xV//+le5jVKyWLx4sYiMjJRvrc/JyRGhoaEiPT1dbjMUszAYDOLcuXPi3LlzAoDIysoS\n586dk++QstWYk5KSxKRJk0RRUZE4efKkGD16tMvdQn2/LIxGo3jmmWfE8OHDRUlJidVnaHt7u7wN\nJWTRm+/eTSbE0MnCllgMuQAAvf589NFHchuLxSJee+01ER4eLry8vMTMmTNFWVmZ1Xba2trEihUr\nxLBhw4Svr6/4+c9/Lmpqahw8Gtv6bjGkpBz++c9/inHjxgkvLy8xZswY8cEHH1itV0oWer1epKam\niujoaOHt7S1GjhwpXn31VasD3VDM4ujRo71+LixevFgIYbsx3759WyxYsED4+/uLwMBAsXTpUmEw\nGBw1zD65XxbXrl2752fo0aNH5W0oIYve9FYMDZUsbEkS4q6vcSUiIiJSGM4ZIiIiIkVjMURERESK\nxmKIiIiIFI3FEBERESkaiyEiIiJSNBZDREREpGgshoiIiEjRWAwRERGRorEYIqJBacmSJZAkCZIk\nwcPDA+Hh4Zg1axa2b98uP7esL3bs2AG1Wm3HnhKRq2MxRESDVlJSEmpqanD9+nUcPHgQTz75JFJT\nUzFnzhx0dHQ4u3tENEiwGCKiQcvLywtarRaRkZGYPHkyXnnlFeTm5uLgwYPYsWMHACArKwvjx4+H\nn58foqKisGLFCjQ3NwMAjh07hqVLl6KpqUk+y7R+/XoAwM6dOxEXF4eAgABotVo8//zzqK+vd9JI\nicieWAwR0ZDyk5/8BBMnTkROTg4AwM3NDdu2bcO//vUvfPzxxygoKEB6ejoAYOrUqdiyZQsCAwNR\nU1ODmpoa/P73vwcAmEwmbNiwAefPn8e+fftw/fp1LFmyxFnDIiI7Ujm7A0REtjZmzBhcuHABAJCW\nliYvj4mJwR/+8AcsW7YM7733Hjw9PREUFARJkqDVaq228cILL8h/HjlyJLZt24bHHnsMzc3N8Pf3\nd8xAiMgheGaIiIYcIQQkSQIAHDlyBDNnzkRkZCQCAgKwcOFC3L59G62trffdRnFxMebOnYvo6GgE\nBARg+vTpAICqqiq795+IHIvFEBENOZcuXUJsbCyuX7+OOXPmYMKECfjss89QXFyMd999FwBgNBrv\n+f6WlhbMnj0bgYGB2LVrF06fPo29e/d+7/uIaHDiZTIiGlIKCgpw8eJFrFq1CsXFxbBYLPjTn/4E\nN7fO//vt3r3bqr2npyfMZrPVssuXL+P27dvIzMxEVFQUAODMmTOOGQARORzPDBHRoNXe3o7a2lpU\nV1fj7Nmz2LRpE+bNm4c5c+Zg0aJFGDVqFEwmE9555x1UVFRg586dyM7OttpGTEwMmpubkZ+fj1u3\nbqG1tRXR0dHw9PSU37d//35s2LDBSaMkIntjMUREg9ahQ4eg0+kQExODpKQkHD16FNu2bUNubi7c\n3d0xceJEZGVl4c0338S4ceOwa9cubN682WobU6dOxbJly/Dcc88hLCwMb731FsLCwrBjxw7s2bMH\nDz/8MDIzM/HHP/7RSaMkInuThBDC2Z0gIiIichaeGSIiIiJFYzFEREREisZiiIiIiBSNxRAREREp\nGoshIiIiUjQWQ0RERKRoLIaIiIhI0VgMERERkaKxGCIiIiJFYzFEREREisZiiIiIiBSNxRAREREp\n2v8DcxBwpmZiexQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2147b189ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%time plot_learning_curve(pipeline, \"accuracy vs. training set size\", msg_train, label_train, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.grid_search import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pipeline_svm = Pipeline([\n",
    "    ('bow', CountVectorizer(analyzer='char')),\n",
    "    ('tfidf', TfidfTransformer()),\n",
    "    ('classifier', SVC()),  # <== change here\n",
    "])\n",
    "\n",
    "# pipeline parameters to automatically explore and tune\n",
    "param_svm = [\n",
    "  {'classifier__C': [1], 'classifier__kernel': ['linear']},\n",
    "  {'classifier__C': [1], 'classifier__gamma': [0.001, 0.0001], 'classifier__kernel': ['rbf']},\n",
    "]\n",
    "\n",
    "grid_svm = GridSearchCV(\n",
    "    pipeline_svm,  # pipeline from above\n",
    "    param_grid=param_svm,  # parameters to tune via cross validation\n",
    "    refit=True,  # fit using all data, on the best detected classifier\n",
    "    n_jobs=-1,  # number of cores to use for parallelization; -1 for \"all cores\"\n",
    "    scoring='accuracy',  # what score are we optimizing?\n",
    "    cv=StratifiedKFold(label_train, n_folds=5),  # what type of cross validation to use\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 6 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[mean: 0.64665, std: 0.01228, params: {'classifier__C': 1, 'classifier__kernel': 'linear'},\n",
       " mean: 0.52763, std: 0.00052, params: {'classifier__C': 1, 'classifier__gamma': 0.001, 'classifier__kernel': 'rbf'},\n",
       " mean: 0.52763, std: 0.00052, params: {'classifier__C': 1, 'classifier__gamma': 0.0001, 'classifier__kernel': 'rbf'}]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time svm_detector = grid_svm.fit(msg_train, label_train)\n",
    "svm_detector.grid_scores_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[163  50]\n",
      " [131 127]]\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "       FAKE       0.55      0.77      0.64       213\n",
      "       REAL       0.72      0.49      0.58       258\n",
      "\n",
      "avg / total       0.64      0.62      0.61       471\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(label_test, svm_detector.predict(msg_test)))\n",
    "print(classification_report(label_test, svm_detector.predict(msg_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'REAL'"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_detector.predict([\"Donald Trump just trolled Rosie O'Donnell. Not good\"])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'REAL'"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_detector.predict([\"Kushner family won't attend China investor pitch after criticism.\"])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'REAL'"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_detector.predict([\"US prosecuter told to push for more harsher punishments\"])[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating accuracy using other machine learning algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.cross_validation import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cv=CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "new_df1=adv[['news']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "new_df2=adv[['label']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "train_data=new_df1.iloc[1:500,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_data=new_df2.iloc[500:1,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "train_label=new_df1.iloc[1:500,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_label=new_df2.iloc[500:1,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_vectors=cv.fit_transform(train_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_vectors=cv.fit_transform(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Extraction function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['label']"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv.get_feature_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1]], dtype=int64)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_vectors.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1]], dtype=int64)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_vectors.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X=adv.news\n",
    "y=adv.label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2353,)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2353,)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cross_validation import train_test_split\n",
    "X_train, X_test, y_train,y_test=train_test_split(X,y,random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1764,)\n",
      "(589,)\n",
      "(1764,)\n",
      "(589,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "vect = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "vect.fit(X_train)\n",
    "X_train_dtm = vect.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train_dtm=vect.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<1764x5028 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 17866 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_dtm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<589x5028 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 5077 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_dtm=vect.transform(X_test)\n",
    "X_test_dtm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K Nearest Neighbors "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "knn= KNeighborsClassifier(n_neighbors=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=1, n_neighbors=8, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train_dtm, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_pred=knn.predict(X_test_dtm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set predictions:\n",
      " ['FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'REAL' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'REAL'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'REAL'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'REAL'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'REAL' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'REAL' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE'\n",
      " 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE' 'FAKE']\n"
     ]
    }
   ],
   "source": [
    "print(\"Test set predictions:\\n {}\".format(y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.52801358234295415"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(X_test_dtm, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 4 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=1, n_neighbors=8, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time knn.fit(X_train_dtm, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nb=MultinomialNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 8 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time nb.fit(X_train_dtm, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred_class=nb.predict(X_test_dtm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## predicted class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['REAL', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL',\n",
       "       'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE', 'FAKE',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE',\n",
       "       'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE',\n",
       "       'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL',\n",
       "       'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL', 'FAKE',\n",
       "       'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE',\n",
       "       'REAL', 'REAL', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL', 'REAL',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'REAL', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'FAKE', 'REAL',\n",
       "       'FAKE', 'REAL', 'FAKE', 'FAKE', 'REAL', 'REAL', 'FAKE', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'FAKE', 'REAL', 'REAL', 'REAL', 'FAKE',\n",
       "       'FAKE', 'FAKE', 'FAKE', 'FAKE', 'FAKE', 'REAL', 'REAL', 'REAL',\n",
       "       'REAL', 'FAKE', 'REAL', 'FAKE', 'FAKE'], \n",
       "      dtype='<U4')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Accuracy for navie bayes algorithm by testing and training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78777589134125636"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.accuracy_score(y_test, y_pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[228,  66],\n",
       "       [ 59, 236]])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.confusion_matrix(y_test, y_pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "       FAKE       0.79      0.78      0.78       294\n",
      "       REAL       0.78      0.80      0.79       295\n",
      "\n",
      "avg / total       0.79      0.79      0.79       589\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(y_test, y_pred_class))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction probability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.46933872,  0.53066128],\n",
       "       [ 0.41658589,  0.58341411],\n",
       "       [ 0.17742994,  0.82257006],\n",
       "       ..., \n",
       "       [ 0.04550814,  0.95449186],\n",
       "       [ 0.94123225,  0.05876775],\n",
       "       [ 0.93131071,  0.06868929]])"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb.predict_proba(X_test_dtm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg= LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 22.1 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time logreg.fit(X_train_dtm, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
      "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
      "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
      "          verbose=0, warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "print (logreg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred_class=logreg.predict(X_test_dtm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.60216762,  0.39783238],\n",
       "       [ 0.35018079,  0.64981921],\n",
       "       [ 0.41720028,  0.58279972],\n",
       "       ..., \n",
       "       [ 0.09965822,  0.90034178],\n",
       "       [ 0.84567486,  0.15432514],\n",
       "       [ 0.59171839,  0.40828161]])"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_prob=logreg.predict_proba(X_test_dtm)\n",
    "y_pred_prob"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78777589134125636"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.accuracy_score(y_test, y_pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "       FAKE       0.76      0.83      0.80       294\n",
      "       REAL       0.82      0.74      0.78       295\n",
      "\n",
      "avg / total       0.79      0.79      0.79       589\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(y_test,y_pred_class))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "names=['label','news','length']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "seed=7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "models = []\n",
    "models.append(('LR', LogisticRegression()))\n",
    "models.append(('KNN', KNeighborsClassifier()))\n",
    "models.append(('NB', MultinomialNB()))\n",
    "models.append(('SVM', SVC()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "results=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "names=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "scoring='accuracy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR: 0.806429 (0.041060)\n",
      "KNN: 0.597779 (0.079254)\n",
      "NB: 0.801432 (0.031837)\n",
      "SVM: 0.545061 (0.064192)\n"
     ]
    }
   ],
   "source": [
    "for name, model in models:\n",
    "    kfold = model_selection.KFold(n_splits=10, random_state=seed)\n",
    "    scores = model_selection.cross_val_score(model, X_test_dtm, y_pred_class, cv=kfold, scoring=scoring)\n",
    "    results.append(scores)\n",
    "    names.append(name)\n",
    "    msg = \"%s: %f (%f)\" % (name, scores.mean(), scores.std())\n",
    "    print(msg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x214728b3438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "fig.suptitle('Algorithm Comparison')\n",
    "ax = fig.add_subplot(111)\n",
    "plt.boxplot(results)\n",
    "ax.set_xticklabels(names)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\naEXZfAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2147ac7a6a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    " \n",
    "# Data to plot\n",
    "labels = 'Nave Bayes', 'SVM', 'K-NN', 'LG'\n",
    "sizes = [78, 65, 52.29, 78.77]\n",
    "colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n",
    "explode = (0.1, 0, 0, 0)  # explode 1st slice\n",
    " \n",
    "# Plot\n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "        autopct='%1.1f%%', shadow=True, startangle=140)\n",
    " \n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkMAAAGzCAYAAAAsQxMfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzt3XtcVNX+//H3oDmowCAWFxUVBe+m5snELmhpaFZqmemx\nwLQ8dSxT81icvER1Iu1rdtfMI5hmpmlaWhqaeEmszKzs4hVvCWSmjGCiwfr90c85TVyUAmZwv56P\nx3482muvteezZwe83XvNHpsxxggAAMCifDxdAAAAgCcRhgAAgKURhgAAgKURhgAAgKURhgAAgKUR\nhgAAgKURhgAAgKURhgAAgKURhgAAgKURhgDgAtO1a1d17drV02UAVQZhCKgCvv76a/Xv31+NGjWS\nr6+v6tevrx49eujFF1/0dGl/SteuXWWz2WSz2eTj46OAgAA1b95cd955p1JTU//SvufPn6/nnnuu\nnCot2SuvvKKUlJQKfx1JGjJkiOv9Km0ZMmRIpdQDXGhsfDcZ4N02bdqkbt26qWHDhoqPj1doaKgO\nHjyozZs3a8+ePdq9e7enSyyzrl27as+ePUpKSpIk5eXlaffu3VqyZIn27t2rAQMGaN68ebrooovK\nvO8bb7xR27dv1759+8q5andt2rTRxRdfrLS0tAp9HUlKT0/Xnj17XOsZGRmaOHGihg8frquvvtrV\n3rRpU0VHR+v06dOSpBo1alR4bcCFoLqnCwBQuv/85z9yOBz67LPPFBgY6Lbtxx9/9FBVf53D4dAd\nd9zh1vb0009r5MiReuWVV9S4cWNNnjzZQ9V5xqlTp1SjRg35+LhftI+OjlZ0dLRrfcuWLZo4caKi\no6OLvIcSIQgoK26TAV5uz549at26dZEgJEnBwcFu6zabTffff7/eeOMNNW/eXL6+vurYsaPWr1/v\n1m///v365z//qebNm6tmzZqqW7eubrvttiJXU1JSUmSz2bRx40aNHDlSl1xyiQIDA/WPf/xDp0+f\n1vHjxxUXF6c6deqoTp06GjdunP7KxeZq1arphRdeUKtWrfTSSy8pJyfHbfu8efPUsWNH1axZU0FB\nQRo4cKAOHjzo2t61a1etWLFC+/fvd906aty4sWt7fn6+Jk2apMjISNntdoWHh2vcuHHKz88vUsu8\nefPUqVMn1apVS3Xq1NE111yjDz/8UJLUuHFjffPNN1q3bp3rdX4/R2fv3r267bbbFBQUpFq1aqlz\n585asWKF2/7T0tJks9m0YMECjR8/XvXr11etWrXkdDr/9Pv3+/fh9/Wcfa2FCxcqMTFR9evXl7+/\nv/r376+cnBzl5+dr1KhRCg4Olp+fn+66664S35PS3n+gquLKEODlGjVqpPT0dG3fvl1t2rQ5Z/91\n69bprbfe0siRI2W32/XKK6+oZ8+e+vTTT13jP/vsM23atEkDBw5UgwYNtG/fPk2fPl1du3bVt99+\nq1q1arnt84EHHlBoaKgSExO1efNmzZw5U4GBgdq0aZMaNmyop556Su+//76eeeYZtWnTRnFxcX/6\neKtVq6ZBgwZpwoQJ2rhxo3r37i3ptytkEyZM0IABA3T33XfryJEjevHFF3XNNdfoiy++UGBgoB59\n9FHl5OTo0KFDmjZtmiTJz89PklRYWKibb75ZGzdu1PDhw9WyZUt9/fXXmjZtmnbu3KmlS5e6akhM\nTNRjjz2mLl266PHHH1eNGjX0ySef6KOPPtL111+v5557Tg888ID8/Pz06KOPSpJCQkIkSdnZ2erS\npYtOnjypkSNHqm7dupozZ45uvvlmvf322+rXr5/b8T7xxBOqUaOGxo4dq/z8/Aq9qpOUlKSaNWvq\nkUce0e7du/Xiiy/qoosuko+Pj44dO6bHHntMmzdvVkpKiiIiIjRx4kTX2PN5/4EqywDwah9++KGp\nVq2aqVatmomOjjbjxo0zq1atMqdPny7SV5KRZLZs2eJq279/v/H19TX9+vVztZ08ebLI2PT0dCPJ\nvP7666625ORkI8nExsaawsJCV3t0dLSx2Wzm3nvvdbX9+uuvpkGDBiYmJuacxxQTE2Nat25d4vZ3\n3nnHSDLPP/+8McaYffv2mWrVqpn//Oc/bv2+/vprU716dbf23r17m0aNGhXZ59y5c42Pj4/ZsGGD\nW/uMGTOMJPPxxx8bY4zZtWuX8fHxMf369TMFBQVufX//HrRu3brYYx01apSR5PY6J06cMBEREaZx\n48aufa5du9ZIMk2aNCn2fJTms88+M5JMcnJysdtjYmLcajv7Wm3atHH7/2bQoEHGZrOZXr16uY2P\njo52ew/L8v4DVRG3yQAv16NHD6Wnp+vmm2/Wl19+qSlTpig2Nlb169fXu+++W6R/dHS0Onbs6Fpv\n2LCh+vTpo1WrVqmgoECSVLNmTdf2M2fO6OjRo4qMjFRgYKC2bt1aZJ/Dhg2TzWZzrV9xxRUyxmjY\nsGGutmrVqulvf/ub9u7d+5eP+ezVnBMnTkiSlixZosLCQg0YMEA//fSTawkNDVVUVJTWrl17zn0u\nWrRILVu2VIsWLdz2ce2110qSax9Lly5VYWGhJk6cWGTuzu/fg5K8//776tSpk6666iq34xk+fLj2\n7dunb7/91q1/fHy82/moSHFxcW6T0s+ex6FDh7r1u+KKK3Tw4EH9+uuvksrn/Qe8GbfJgCrg8ssv\n15IlS3T69Gl9+eWXeueddzRt2jT1799f27ZtU6tWrVx9o6Kiioxv1qyZTp48qSNHjig0NFS//PKL\nkpKSlJycrB9++MFtns8f5+lIvwWq33M4HJKk8PDwIu3Hjh37S8cqSbm5uZIkf39/SdKuXbtkjCn2\n2CSd16fOdu3ape+++06XXHJJsdvPTkbfs2ePfHx83N7Tsti/f7+uuOKKIu0tW7Z0bf/97c6IiIg/\n9Tp/RlnOY2FhoXJyclS3bt1yef8Bb0YYAqqQGjVq6PLLL9fll1+uZs2a6a677tKiRYs0adKkMu3n\ngQceUHJyskaNGqXo6Gg5HA7ZbDYNHDhQhYWFRfpXq1at2P0U127K4Wkd27dvlyRFRkZK+m2+j81m\n0wcffFDsa569klSawsJCtW3bVs8++2yx2/8YCCpLZV0Vksp2HqX/ncvyeP8Bb0YYAqqov/3tb5Kk\nzMxMt/Zdu3YV6btz507VqlXLdVXk7bffVnx8vKZOnerqc+rUKR0/frwCKz4/BQUFmj9/vmrVquW6\n1dS0aVMZYxQREaFmzZqVOr6kW1lNmzbVl19+qeuuu67U211NmzZVYWGhvv32W7Vv377Mr9OoUSPt\n2LGjSPv333/v2l7VlOX9B6oi5gwBXm7t2rXFXm15//33JUnNmzd3a09PT3eb93Pw4EEtW7ZM119/\nvetf9dWqVSuyzxdffNE1p8hTCgoKNHLkSH333XcaOXKkAgICJEm33HKLqlWrpsTExCJ1G2N09OhR\n13rt2rWLvdU3YMAA/fDDD3rttdeKbPvll1+Ul5cnSerbt698fHz0+OOPF7lK9vvXrl27drHh8YYb\nbtCnn36q9PR0V1teXp5mzpypxo0b/+nbb55UlvcfqIq4MgR4uQceeEAnT55Uv3791KJFC50+fVqb\nNm3SW2+9pcaNG+uuu+5y69+mTRvFxsa6fbRe+u3j4mfdeOONmjt3rhwOh1q1aqX09HStXr1adevW\n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\nsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDSP\nhqH169frpptuUr169WSz2bR06VK37TabrdjlmWeeKXGfKSkpRfr7+vpW9KEAAIAqyqNhKC8vT+3a\ntdPLL79c7PbMzEy3Zfbs2bLZbLr11ltL3W9AQIDbuP3791dE+QAA4AJQ3ZMv3qtXL/Xq1avE7aGh\noW7ry5YtU7du3dSkSZNS92uz2YqMBQAAKE6VmTOUnZ2tFStWaNiwYefsm5ubq0aNGik8PFx9+vTR\nN998U2r//Px8OZ1OtwUAAFhDlQlDc+bMkb+/v2655ZZS+zVv3lyzZ8/WsmXLNG/ePBUWFqpLly46\ndOhQiWOSkpLkcDhcS3h4eHmXDwAAvFSVCUOzZ8/W4MGDzzkZOjo6WnFxcWrfvr1iYmK0ZMkSXXLJ\nJXr11VdLHJOQkKCcnBzXcvDgwfIuHwAAeCmPzhk6Xxs2bNCOHTv01ltvlXnsRRddpA4dOmj37t0l\n9rHb7bLb7X+lRAAAUEVViStD//3vf9WxY0e1a9euzGMLCgr09ddfKywsrAIqAwAAVZ1Hrwzl5ua6\nXbHJyMjQtm3bFBQUpIYNG0qSnE6nFi1apKlTpxa7j7i4ONWvX19JSUmSpMcff1ydO3dWZGSkjh8/\nrmeeeUb79+/X3XffXfEHBAAAqhyPhqEtW7aoW7durvUxY8ZIkuLj45WSkiJJWrBggYwxGjRoULH7\nOHDggHx8/neB69ixY7rnnnuUlZWlOnXqqGPHjtq0aZNatWpVcQcCAACqLJsxxni6CG/jdDrlcDiU\nk5OjgIAAT5cDAKgg01J3eroEyxrdo1m57/PP/v2uEnOGAAAAKgphCAAAWBphCAAAWBphCAAAWBph\nCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAA\nWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBph\nCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWBphCAAAWJpHw9D69et10003\nqV69erLZbFq6dKnb9iFDhshms7ktPXv2POd+Fy1apBYtWsjX11dt27bV+++/X1GHAAAAqjiPhqG8\nvDy1a9dOL7/8col9evbsqczMTNfy5ptvlrrPTZs2adCgQRo2bJi++OIL9e3bV3379tX27dvLu3wA\nAHABqO7JF+/Vq5d69epVah+73a7Q0NDz3ufzzz+vnj176l//+pck6YknnlBqaqpeeuklzZgx4y/V\nCwAALjxeP2coLS1NwcHBat68ue677z4dPXq01P7p6enq3r27W1tsbKzS09NLHJOfny+n0+m2AAAA\na/DqMNSzZ0+9/vrrWrNmjSZPnqx169apV69eKigoKHFMVlaWQkJC3NpCQkKUlZVV4pikpCQ5HA7X\nEh4eXm7HAAAAvJtHb5Ody8CBA13/3bZtW1166aVq2rSp0tLSdN1115Xb6yQkJGjMmDGudafTSSAC\nAMAivPrK0B81adJEF198sXbv3l1in9DQUGVnZ7u1ZWdnlzrvyG63KyAgwG0BAADWUKXC0KFDh3T0\n6FGFhYWV2Cc6Olpr1qxxa0tNTVV0dHRFlwcAAKogj94my83NdbvKk5GRoW3btikoKEhBQUFKTEzU\nrbfeqtDQUO3Zs0fjxo1TZGSkYmNjXWPi4uJUv359JSUlSZIefPBBxcTEaOrUqerdu7cWLFigLVu2\naObMmZV+fAAAwPt59MrQli1b1KFDB3Xo0EGSNGbMGHXo0EETJ05UtWrV9NVXX+nmm29Ws2bNNGzY\nMHXs2FEbNmyQ3W537ePAgQPKzMx0rXfp0kXz58/XzJkz1a5dO7399ttaunSp2rRpU+nHBwAAvJ/N\nGGM8XYS3cTqdcjgcysnJYf4QAFzApqXu9HQJljW6R7Ny3+ef/ftdpeYMAQAAlDfCEAAAsDTCEAAA\nsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTC\nEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAA\nsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDTCEAAAsDSP\nhqH169frpptuUr169WSz2bR06VLXtjNnzujhhx9W27ZtVbt2bdWrV09xcXE6fPhwqftMSUmRzWZz\nW3x9fSv6UAAAQBXl0TCUl5endu3a6eWXXy6y7eTJk9q6dasmTJigrVu3asmSJdqxY4duvvnmc+43\n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\nqWMAAIB1efQ2WW5urnbv3u1az8jI0LZt2xQUFKSGDRtq1KhRevLJJxUVFeX6aH29evXcnkUUFxen\n+vXrKykIoQRtAAAaP0lEQVQpSZL04IMPKiYmRlOnTlXv3r21YMECbdmyRTNnzqz04wMAAN7Po2Fo\ny5Yt6tatm2t9zJgxkqT4+HilpKRo3LhxysvL0/Dhw3X8+HFdddVVWrlypdszhg4cOCAfn/9d4OrS\npYvmz5+v8ePH69///reioqK0dOlSnjEEAACKdd7PGbKSP/ucAgBA1cJzhjynSj5nCAAA4EJEGAIA\nAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZG\nGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIA\nAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJZGGAIAAJbm\n9WGocePGstlsRZYRI0YU2z8tLa3Y/llZWZVcOQAAqAqqe7qAc/nss89UUFDgWt++fbt69Oih2267\nrdRxO3bsUEBAgGs9ODi4wmoEAABVl9eHoUsuucRt/emnn1bTpk0VExNT6rjg4GAFBgZWZGkAAOAC\n4PW3yX7v9OnTmjdvnoYOHSqbzVZq3/bt2yssLEw9evTQxx9/XGrf/Px8OZ1OtwUAAFhDlQpDS5cu\n1fHjxzVkyJAS+4SFhWnGjBlavHixFi9erPDwcHXt2lVbt24tcUxSUpIcDodrCQ8Pr4DqAQCAN7IZ\nY4ynizhfsbGxqlGjht57770yjYuJiVHDhg01d+7cYrfn5+crPz/fte50OhUeHq6cnBy3eUcAgAvL\ntNSdni7Bskb3aFbu+3Q6nXI4HGX+++31c4bO2r9/v1avXq0lS5aUeWynTp20cePGErfb7XbZ7fa/\nUh4AAKiiqsxtsuTkZAUHB6t3795lHrtt2zaFhYVVQFUAAKCqqxJXhgoLC5WcnKz4+HhVr+5eckJC\ngn744Qe9/vrrkqTnnntOERERat26tU6dOqVZs2bpo48+0ocffuiJ0gEAgJerEmFo9erVOnDggIYO\nHVpkW2Zmpg4cOOBaP336tB566CH98MMPqlWrli699FKtXr1a3bp1q8ySAQBAFVGlJlBXlj87AQsA\nULUwgdpzvGkCdZWZMwQAAFARqsRtsgsN/xLxnIr4lwgAoGrjyhAAALA0whAAALA0whAAALA0whAA\nALA0whAAALA0whAAALA0whAAALA0whAAALA0whAAALA0whAAALA0whAAALA0whAAALA0whAAALA0\nwhAAALC06p4uALhQTEvd6ekSLGt0j2aeLgFAFcaVIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAA\nYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGmEIQAAYGle\nHYYee+wx2Ww2t6VFixaljklLS9Nll10mu92uyMhIpaSkVE6xAACgSqru6QLOpXXr1lq9erVrvXr1\nkkvOyMhQ7969de+99+qNN97QmjVrdPfddyssLEyxsbGVUS4AAKhivD4MVa9eXaGhoefVd8aMGYqI\niNDUqVMlSS1bttTGjRs1bdo0whAAACiWV98mk6Rdu3apXr16atKkiQYPHqwDBw6U2Dc9PV3du3d3\na4uNjVV6enqpr5Gfny+n0+m2AAAAa/DqMHTFFVcoJSVFK1eu1PTp05WRkaGrr75aJ06cKLZ/VlaW\nQkJC3NpCQkLkdDr1yy+/lPg6SUlJcjgcriU8PLxcjwMAAHgvrw5DvXr10m233aZLL71UsbGxev/9\n93X8+HEtXLiwXF8nISFBOTk5ruXgwYPlun8AAOC9vH7O0O8FBgaqWbNm2r17d7HbQ0NDlZ2d7daW\nnZ2tgIAA1axZs8T92u122e32cq0VAABUDV59ZeiPcnNztXv3boWFhRW7PTo6WmvWrHFrS01NVXR0\ndGWUBwAAqiCvDkNjx47VunXrtG/fPm3atEn9+vVT9erVNWjQIEm/3d6Ki4tz9b/33nu1d+9ejRs3\nTt9//71eeeUVLVy4UKNHj/bUIQAAAC/n1bfJDh06pEGDBuno0aO65JJLdNVVV2nz5s265JJLJEmZ\nmZluny6LiIjQihUrNHr0aD3//PNq0KCBZs2axcfqAQBAibw6DC1YsKDU7cU9Xbpr16764osvKqgi\nAABwofHq22QAAAAVjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAE\nAAAszaufQA0A3mBa6k5Pl2BZo3s083QJsACuDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsj\nDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEA\nAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEsjDAEAAEvz6jCUlJSkyy+/XP7+/goODlbf\nvn21Y8eOUsekpaXJZrMVWbKysiqpagAAUJV4dRhat26dRowYoc2bNys1NVVnzpzR9ddfr7y8vHOO\n3bFjhzIzM11LcHBwJVQMAACqmuqeLqA0K1eudFtPSUlRcHCwPv/8c11zzTWljg0ODlZgYGBFlgcA\nAC4AXn1l6I9ycnIkSUFBQefs2759e4WFhalHjx76+OOPS+2bn58vp9PptgAAAGuoMmGosLBQo0aN\n0pVXXqk2bdqU2C8sLEwzZszQ4sWLtXjxYoWHh6tr167aunVriWOSkpLkcDhcS3h4eEUcAgAA8EJe\nfZvs90aMGKHt27dr48aNpfZr3ry5mjdv7lrv0qWL9uzZo2nTpmnu3LnFjklISNCYMWNc606nk0AE\nAIBFVIkwdP/992v58uVav369GjRoUObxnTp1KjVE2e122e32v1IiAACoorw6DBlj9MADD+idd95R\nWlqaIiIi/tR+tm3bprCwsHKuDgAAXAi8OgyNGDFC8+fP17Jly+Tv7+96VpDD4VDNmjUl/XaL64cf\nftDrr78uSXruuecUERGh1q1b69SpU5o1a5Y++ugjffjhhx47DgAA4L28OgxNnz5dktS1a1e39uTk\nZA0ZMkSSlJmZqQMHDri2nT59Wg899JB++OEH1apVS5deeqlWr16tbt26VVbZAACgCvHqMGSMOWef\nlJQUt/Vx48Zp3LhxFVQRAAC40FSZj9YDAABUBMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACw\nNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQ\nAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACw\nNMIQAACwNMIQAACwNMIQAACwNMIQAACwNMIQAACwtCoRhl5++WU1btxYvr6+uuKKK/Tpp5+W2j8t\nLU2XXXaZ7Ha7IiMjlZKSUjmFAgCAKsfrw9Bbb72lMWPGaNKkSdq6davatWun2NhY/fjjj8X2z8jI\nUO/evdWtWzdt27ZNo0aN0t13361Vq1ZVcuUAAKAq8Pow9Oyzz+qee+7RXXfdpVatWmnGjBmqVauW\nZs+eXWz/GTNmKCIiQlOnTlXLli11//33q3///po2bVolVw4AAKqC6p4uoDSnT5/W559/roSEBFeb\nj4+PunfvrvT09GLHpKenq3v37m5tsbGxGjVqVImvk5+fr/z8fNd6Tk6OJMnpdP6V8kt0Ki+3QvaL\nc6uocypxXj2pIs+rxLn1JM7thasizu3ZfRpjyjTOq8PQTz/9pIKCAoWEhLi1h4SE6Pvvvy92TFZW\nVrH9nU6nfvnlF9WsWbPImKSkJCUmJhZpDw8P/wvVwxv929MFoEJwXi9cnNsLV0We2xMnTsjhcJx3\nf68OQ5UlISFBY8aMca0XFhbq559/Vt26dWWz2TxYmXdxOp0KDw/XwYMHFRAQ4OlyUI44txcuzu2F\nifNaPGOMTpw4oXr16pVpnFeHoYsvvljVqlVTdna2W3t2drZCQ0OLHRMaGlps/4CAgGKvCkmS3W6X\n3W53awsMDPwLlV/YAgIC+OG7QHFuL1yc2wsT57WoslwROsurJ1DXqFFDHTt21Jo1a1xthYWFWrNm\njaKjo4sdEx0d7dZfklJTU0vsDwAArM2rw5AkjRkzRq+99prmzJmj7777Tvfdd5/y8vJ01113Sfrt\nFldcXJyr/7333qu9e/dq3Lhx+v777/XKK69o4cKFGj16tKcOAQAAeDGvvk0mSbfffruOHDmiiRMn\nKisrS+3bt9fKlStdk6QzMzN14MABV/+IiAitWLFCo0eP1vPPP68GDRpo1qxZio2N9dQhXDDsdrsm\nTZpU5JYiqj7O7YWLc3th4ryWL5sp6+fPAAAALiBef5sMAACgIhGGAACApRGGAACApRGGAACApRGG\nAACApRGGvMyQIUNks9n09NNPu7UvXbrUK74a5LHHHpPNZnMtDodDV199tdatW+fp0vA7R44c0X33\n3aeGDRvKbrcrNDRUsbGxWrdunS6++OIi/3+d9cQTTygkJERnzpxRSkqKbDabWrZsWaTfokWLZLPZ\n1Lhx4wo+Eki//V7o27evW9vbb78tX19fTZ06tdgxV111lWw2m95++2239v/7v/9TZGSka33WrFmy\n2Wy68cYb3fr99NNPstls2rhxYzkdBcqquPP+e1988YVuv/12hYWFyW63q1GjRrrxxhv13nvvlfmL\nSq2OMOSFfH19NXnyZB07dszTpRSrdevWyszMVGZmptLT0xUVFaUbb7xROTk5ni4N/9+tt96qL774\nQnPmzNHOnTv17rvvqmvXrsrJydEdd9yh5OTkImOMMUpJSVFcXJwuuugiSVLt2rX1448/Kj093a3v\nf//7XzVs2LBSjgVFzZo1S4MHD9b06dP10EMPldjP19dXjz76qH799ddS93fRRRdp5cqV2rBhQ3mX\nigqybNkyde7cWbm5ua6HEq9cuVL9+vXT+PHj+X1cRoQhL9S9e3eFhoYqKSmpxD5Hjx7VoEGDVL9+\nfdWqVUtt27bVm2++6do+c+ZM1atXT4WFhW7j+vTpo6FDh7rWly1bpssuu0y+vr5q0qSJEhMTz/mL\ns3r16goNDVVoaKhatWqlxx9/XLm5udq5c6erz7PPPqu2bduqdu3aCg8P1z//+U/l5uZKkvLy8hQQ\nEFDkX6xLly5V7dq1deLECUnSwYMHNWDAAAUGBiooKEh9+vTRvn37XP3T0tLUqVMn1a5dW4GBgbry\nyiu1f//+Umu3guPHj2vDhg2aPHmyunXrpkaNGqlTp05KSEjQzTffrGHDhmnnzp1F/sW/bt067d27\nV8OGDXO1Va9eXX//+981e/ZsV9uhQ4eUlpamv//975V2TPifKVOm6IEHHtCCBQtcT+IvyeDBg3Xk\nyBG381ecgIAAxcXF6ZFHHinPUlFB8vLyNGzYMPXu3VsrVqzQ9ddfryZNmqhly5YaNmyYvvzyyz/1\n/VxWRhjyQtWqVdNTTz2lF198UYcOHSq2z6lTp9SxY0etWLFC27dv1/Dhw3XnnXfq008/lSTddttt\nOnr0qNauXesa8/PPP2vlypUaPHiwJGnDhg2Ki4vTgw8+qG+//VavvvqqUlJS9J///Oe8a83Pz1dy\ncrICAwPVvHlzV7uPj49eeOEFffPNN5ozZ44++ugjjRs3TtJvVxsGDhxY5OpEcnKy+vfvL39/f505\nc0axsbHy9/fXhg0b9PHHH8vPz089e/bU6dOn9euvv6pv376KiYnRV199pfT0dA0fPtwrbiV6mp+f\nn/z8/LR06VLl5+cX2d62bVtdfvnlRf5AJicnq0uXLmrRooVb+9ChQ7Vw4UKdPHlSkpSSkqKePXu6\nngKPyvPwww/riSee0PLly9WvX79z9g8MDFRCQoISExNd568kiYmJ2rp1q5YuXVpe5aKCfPjhhzp6\n9Kjrd2px+F1YRgZeJT4+3vTp08cYY0znzp3N0KFDjTHGvPPOO+Zcp6t3797moYcecq336dPHNd4Y\nY1599VVTr149U1BQYIwx5rrrrjNPPfWU2z7mzp1rwsLCSnyNSZMmGR8fH1O7dm1Tu3ZtY7PZTEBA\ngPnggw9KrW3RokWmbt26rvVPPvnEVKtWzRw+fNgYY0x2drapXr26SUtLc9XRvHlzU1hY6BqTn59v\natasaVatWmWOHj1qJLn6w93bb79t6tSpY3x9fU2XLl1MQkKC+fLLL13bZ8yYYfz8/MyJEyeMMcY4\nnU5Tq1YtM2vWLFef5ORk43A4jDHGtG/f3syZM8cUFhaapk2bmmXLlplp06aZRo0aVepxWVV8fLyp\nUaOGkWTWrFlzXmOuvPJK89BDD5lffvnFNGjQwPWz/swzz5imTZu6+r322muun82xY8eali1bml9/\n/dUcOXLESDIbNmwo/wPCefn934Pfe/rpp40k8/PPP7vaPv30U9fv5dq1a5v33nuvMkut8rgy5MUm\nT57suhf8RwUFBXriiSfUtm1bBQUFyc/PT6tWrXL7nrbBgwdr8eLFrqsDb7zxhgYOHCgfn99O+5df\nfqnHH3/cdSXBz89P99xzjzIzM0v9V2Tz5s21bds2bdu2TZ9//rnuu+8+3XbbbdqyZYurz+rVq3Xd\nddepfv368vf315133qmjR4+69tupUye1bt1ac+bMkSTNmzdPjRo10jXXXOOqbffu3fL393fVFhQU\npFOnTmnPnj0KCgrSkCFDFBsbq5tuuknPP/+8MjMz/+I7fuG49dZbdfjwYb377rvq2bOn0tLSdNll\nlyklJUWSNGjQIBUUFGjhwoWSpLfeeks+Pj66/fbbi93f0KFDlZycrHXr1ikvL0833HBDZR0K/r9L\nL71UjRs31qRJk1y3nCVpzpw5bj/Df5zf5evrq8TERE2ePFk///xzqa+RkJCgw4cPu34uUXVceuml\nrt/LeXl555zuAHeEIS92zTXXKDY2VgkJCUW2PfPMM3r++ef18MMPa+3atdq2bZtiY2N1+vRpV5+b\nbrpJxhitWLFCBw8e1IYNG1y3yCQpNzdXiYmJrh+gbdu26euvv9auXbvk6+tbYl01atRQZGSkIiMj\n1aFDBz399NNq0KCBnnvuOUnSvn37dOONN+rSSy/V4sWL9fnnn+vll1+WJLf67r77btcf5+TkZN11\n112uS7u5ubnq2LGjW23btm3Tzp07XXNVkpOTlZ6eri5duuitt95Ss2bNtHnz5j/5bl94fH191aNH\nD02YMEGbNm3SkCFDNGnSJEm/zRHp37+/61ZlcnKyBgwYID8/v2L3NXjwYG3evFmPPfaY7rzzTlWv\n7vXf8XzBqV+/vtLS0vTDDz+oZ8+errl1/fr1c/sZ6dChQ5Gx8fHxql+/vp566qlSXyMoKEgPP/yw\nJk2apFOnTlXIceCvi4qKkiTt2LHD1Wa3212/l1F2hCEv9/TTT+u9994r8q+9jz/+WH369NEdd9yh\ndu3aqUmTJm4TmKXf/hjecssteuONN/Tmm2+qefPmuuyyy1zbL7vsMu3YscP1A/T75ezVo/Pl4+Oj\nX375RZL0+eefq7CwUFOnTlXnzp3VrFkzHT58uMiYO+64Q/v379cLL7ygb7/9VvHx8W617dq1S8HB\nwUVq+/3EwA4dOighIUGbNm1SmzZtNH/+/DLVbSWtWrVSXl6ea33YsGHauHGjli9frk2bNrlNnP6j\noKAg3XzzzVq3bp3bBHxUrkaNGmndunXKyspyBaKAgAC3n4/i/iFzdh7iyy+/rIMHD5b6GqNGjVJh\nYaFefPHFijoM/EXXX3+9goKCNHnyZE+XcsEgDHm5tm3bavDgwXrhhRfc2qOiopSamqpNmzbpu+++\n0z/+8Q9lZ2cXGT948GCtWLFCs2fPdrsqJEkTJ07U66+/rsTERH3zzTf67rvvtGDBAo0fP77Umn79\n9VdlZWUpKytLu3bt0pNPPqlvv/1Wffr0kSRFRkbqzJkzevHFF7V3717NnTtXM2bMKLKfOnXq6JZb\nbtG//vUvXX/99WrQoIFb3RdffLH69OmjDRs2KCMjQ2lpaRo5cqQOHTqkjIwMJSQkKD09Xfv379eH\nH36oXbt2FftMHKs5evSorr32Ws2bN09fffWVMjIytGjRIk2ZMsV1jqTfrjxGRkYqLi5OLVq0UJcu\nXUrdb0pKin766aciE6xRucLDw5WWlqYff/xRsbGxcjqd5zWuT58+6tChg2bOnFlqv5o1a2rSpElF\nfufAM3JycopcIT927JhmzZqlFStWqHfv3lq1apX27t2rr776SlOmTJH0WwBGGXh60hLcFTdhLiMj\nwzV58qyjR4+aPn36GD8/PxMcHGzGjx9v4uLiiowtKCgwYWFhRpLZs2dPkddbuXKl6dKli6lZs6YJ\nCAgwnTp1MjNnziyxvkmTJhlJrqVWrVqmbdu2Zvr06W79nn32WRMWFmZq1qxpYmNjzeuvv24kmWPH\njrn1W7NmjZFkFi5cWOS1MjMzTVxcnLn44ouN3W43TZo0Mffcc4/JyckxWVlZpm/fviYsLMzUqFHD\nNGrUyEycONE1OdzKTp06ZR555BFz2WWXGYfDYWrVqmWaN29uxo8fb06ePOnW96mnnjKSzJQpU4rs\n5/cTqIvDBOrKU9zvhUOHDpmoqCjTuXNnk5OTU2TM2QnUv7d+/XojqcQJ1GedOXPGNGvWjAnUHhYf\nH+/2+/bsMmzYMGOMMZ999pnp37+/CQ4ONtWrVzd169Y1sbGxZsGCBW4fPsG52YzhMZXwnLlz52r0\n6NE6fPiwatSo4elyAAAWxCxIeMTJkyeVmZmpp59+Wv/4xz8IQgAAj2HOEDxiypQpatGihUJDQ4v9\ntBwAAJWF22QAAMDSuDIEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAEAAAsjTAE\nAAAs7f8B45Z/by9uEg0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2147ac9b0b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt; plt.rcdefaults()\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    " \n",
    "objects = ('Nave Bayes', 'SVM', 'K-NN', 'LG')\n",
    "y_pos = np.arange(len(objects))\n",
    "performance = [7.02,6.13,4.01,21.1]\n",
    " \n",
    "plt.bar(y_pos, performance, align='center', alpha=0.5)\n",
    "plt.xticks(y_pos, objects)\n",
    "plt.ylabel('Time')\n",
    "plt.title('Spam Detector Time')\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}